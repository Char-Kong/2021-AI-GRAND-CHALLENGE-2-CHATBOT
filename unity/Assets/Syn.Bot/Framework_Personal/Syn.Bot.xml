<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syn.Bot</name>
    </assembly>
    <members>
        <member name="M:Syn.Bot.Common.BaseInterpreter`2.ProcessInnerElements(System.Xml.Linq.XElement,`1)">
            <summary>
            Processes the inner elements of the specified <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="elementNode">The element node.</param>
            <param name="parameter">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Common.BaseInterpreter`2.ProcessAndReplaceAll(System.Xml.Linq.XElement,System.String,`1)">
            <summary>
            Processes the inner elements and replaces them with their values.
            </summary>
            <param name="elementNode">The element node.</param>
            <param name="tagName">Name of the tag.</param>
            <param name="parameter">The context.</param>
        </member>
        <member name="M:Syn.Bot.Common.BaseInterpreter`2.Process(`1)">
            <summary>
            Processes the given <see cref="!:TSimlContext"/>.
            </summary>
            <param name="simlContext"></param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Common.BotSettings">
            <summary>
            A Settings class derived for storing Bot related variables.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.BotSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Common.BotSettings"/> class.
            </summary>
        </member>
        <member name="T:Syn.Bot.Common.Collections.AdapterCollection`1">
            <summary>
            Represents a collection of <see cref="!:T"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.Collections.AdapterCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Common.Collections.AdapterCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.Collections.AdapterCollection`1.AddRange(`0[])">
            <summary>
            Adds all the specified <see cref="T:Syn.Bot.Siml.Interfaces.IAdapter"/>s
            </summary>
            <param name="handlers"></param>
        </member>
        <member name="M:Syn.Bot.Common.Collections.AdapterCollection`1.Add(`0)">
            <summary>
            Adds the specified handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Syn.Bot.Common.Collections.AdapterCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Collections.AdapterCollection`1.Item(System.Xml.Linq.XName)">
            <summary>
            Gets the <see cref="T:Syn.Bot.Siml.Interfaces.IAdapter"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:Syn.Bot.Siml.Interfaces.IAdapter"/>.
            </value>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Common.Collections.AdapterCollection`1.Contains(System.String)">
            <summary>
            Determines whether this collection contains an <see cref="T:Syn.Bot.Siml.Interfaces.IAdapter"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Common.Collections.AdapterCollection`1.Contains(`0)">
            <summary>
             Determines whether this collection contains the specified <see cref="T:Syn.Bot.Siml.Interfaces.IAdapter"/>.
            </summary>
            <param name="tagAdapter">The tag adapter.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Common.Collections.AdapterCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Syn.Bot.Common.Collections.AdapterCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Syn.Bot.Common.Collections.AdapterCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Collections.AdapterCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.Collections.AdapterCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Common.Collections.AdapterCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Syn.Bot.Common.Collections.FilterCollection">
            <summary>
            Represents a collection of <see cref="T:Syn.Bot.Common.Collections.FilterItem"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.Collections.FilterCollection.Remove(System.String)">
            <summary>
            Removes the specified filter by <see cref="P:Syn.Bot.Common.Collections.FilterItem.Name"/>.
            </summary>
            <param name="filterName">Name of the filter.</param>
            <returns><c>true</c> if the specified filter is removed. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Syn.Bot.Common.Collections.FilterCollection.AddWordFilter(System.String,System.String)">
            <summary>
            Adds the word filter.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:Syn.Bot.Common.Collections.FilterCollection.AddTextFilter(System.String,System.String)">
            <summary>
            Adds the text filter.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:Syn.Bot.Common.Collections.FilterCollection.AddRegexFilter(System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            Adds the regex filter.
            </summary>
            <param name="regex">The regex.</param>
            <param name="matchEvaluator">The match evaluator.</param>
        </member>
        <member name="M:Syn.Bot.Common.Collections.FilterCollection.Apply(System.String)">
            <summary>
            Applies filters to the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="T:Syn.Bot.Common.Collections.FilterItem">
            <summary>
            Represents a filter that is used by the <see cref="T:Syn.Bot.Oscova.Interfaces.INormalizer"/> during normalization.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.Collections.FilterItem.#ctor(Syn.Bot.Common.Collections.FilterType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Common.Collections.FilterItem"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:Syn.Bot.Common.Collections.FilterItem.#ctor(System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Common.Collections.FilterItem"/> class.
            </summary>
            <param name="regex">The regex.</param>
            <param name="matchEvaluator">The evaluator.</param>
        </member>
        <member name="P:Syn.Bot.Common.Collections.FilterItem.Name">
            <summary>
            Gets or sets the name of this filter.
            </summary>
            <value>
            The filter name.
            </value>
            <remarks>Returns <c>null</c> if not set.</remarks>
        </member>
        <member name="P:Syn.Bot.Common.Collections.FilterItem.Input">
            <summary>
            Gets the input.
            </summary>
            <value>
            The input.
            </value>
        </member>
        <member name="P:Syn.Bot.Common.Collections.FilterItem.Output">
            <summary>
            Gets the output.
            </summary>
            <value>
            The output.
            </value>
        </member>
        <member name="P:Syn.Bot.Common.Collections.FilterItem.Type">
            <summary>
            Gets the filter type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Syn.Bot.Common.Collections.FilterItem.Regex">
            <summary>
            Gets the regex.
            </summary>
            <value>
            The regex.
            </value>
        </member>
        <member name="P:Syn.Bot.Common.Collections.FilterItem.Evaluator">
            <summary>
            Gets the regex match evaluator.
            </summary>
            <value>
            The regex match evaluator.
            </value>
        </member>
        <member name="T:Syn.Bot.Common.Collections.FilterType">
            <summary>
            Filter types
            </summary>
        </member>
        <member name="F:Syn.Bot.Common.Collections.FilterType.Word">
            <summary>
            Word filter.
            </summary>
        </member>
        <member name="F:Syn.Bot.Common.Collections.FilterType.Text">
            <summary>
            Text filter.
            </summary>
        </member>
        <member name="F:Syn.Bot.Common.Collections.FilterType.Regex">
            <summary>
            Regular Expression.
            </summary>
        </member>
        <member name="T:Syn.Bot.Common.Collections.ParserCollection">
            <summary>
            Represents a collection of <see cref="T:Syn.Bot.Common.Interfaces.ISimlParser"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.Collections.ParserCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Common.Collections.ParserCollection.Add(Syn.Bot.Common.Interfaces.ISimlParser)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Syn.Bot.Common.Collections.ParserCollection.AddRange(Syn.Bot.Common.Interfaces.ISimlParser[])">
            <summary>
            Adds the range.
            </summary>
            <param name="handlers">The handlers.</param>
        </member>
        <member name="M:Syn.Bot.Common.Collections.ParserCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Collections.ParserCollection.Item(System.Xml.Linq.XName)">
            <summary>
            Gets the <see cref="T:Syn.Bot.Common.Interfaces.ISimlParser"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:Syn.Bot.Common.Interfaces.ISimlParser"/>.
            </value>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Common.Collections.ParserCollection.Contains(Syn.Bot.Common.Interfaces.ISimlParser)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Common.Collections.ParserCollection.Contains(System.Xml.Linq.XName)">
            <summary>
            Determines whether this collection contains a parser for the specified tag name.
            </summary>
            <param name="tagName">Name of the tag.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Common.Collections.ParserCollection.CopyTo(Syn.Bot.Common.Interfaces.ISimlParser[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Syn.Bot.Common.Collections.ParserCollection.Remove(Syn.Bot.Common.Interfaces.ISimlParser)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Syn.Bot.Common.Collections.ParserCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Collections.ParserCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.CommonSettings.DefaultValue">
            <summary>
            Gets or Sets the Default Value to return when a Settings Item is not found.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.CommonSettings.UndefinedValue">
            <summary>
            Gets the value that is used to render a Variable as undefined.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.CommonSettings.GetValue(System.String)">
            <summary>
            Gets the main value of the specified variable.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <returns>Value of the variable if it exists otherwise returns the default value.</returns>
        </member>
        <member name="M:Syn.Bot.Common.CommonSettings.Load(System.Xml.Linq.XDocument)">
            <summary>
            Loads the specified settings from an SIML Document.
            </summary>
            <param name="simlDocument">The SIML Document.</param>
        </member>
        <member name="M:Syn.Bot.Common.CommonSettings.Load(System.Xml.Linq.XElement)">
            <summary>
            Loads the specified settings element.
            </summary>
            <param name="settingsElement">The settings element.</param>
        </member>
        <member name="M:Syn.Bot.Common.CommonSettings.GetDocument">
            <summary>
            Gets this <see cref="T:Syn.Bot.Common.Settings"/> instance as an SIML <see cref="T:System.Xml.Linq.XDocument"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Common.Delegates.AdapterEvaluator`2">
            <summary>
            Represents a base SIML evaluation provider for SIML adapters.
            </summary>
            <typeparam name="TSimlAdapter">The type of the siml adapter.</typeparam>
            <typeparam name="TSimlContext">The type of the siml context.</typeparam>
            <param name="simlAdapter">The siml adapter.</param>
            <param name="simlContext">The siml context.</param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Common.Delegates.TimeoutProvider`1">
            <summary>
            Represents the method that is called to check if a request has timed out while the SIML interpreter is processing a response.
            </summary>
            <typeparam name="TSimlContext">The type of the siml context.</typeparam>
            <param name="simlContext">The siml context.</param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Common.Events.SettingsChangedAction">
            <summary>
            Describes the action that caused a <see cref="E:Syn.Bot.Common.Settings.SettingsChanged"/> event. 
            </summary>
        </member>
        <member name="F:Syn.Bot.Common.Events.SettingsChangedAction.Add">
            <summary>
            A new variable added.
            </summary>
        </member>
        <member name="F:Syn.Bot.Common.Events.SettingsChangedAction.Remove">
            <summary>
            An existing variable is removed.
            </summary>
        </member>
        <member name="F:Syn.Bot.Common.Events.SettingsChangedAction.Replace">
            <summary>
            Value or Values part of an existing variable is updated.
            </summary>
        </member>
        <member name="F:Syn.Bot.Common.Events.SettingsChangedAction.Reset">
            <summary>
            Settings cleared.
            </summary>
        </member>
        <member name="T:Syn.Bot.Common.Events.VariableChangedAction">
            <summary>
            Describes the action that caused a <see cref="E:Syn.Bot.Common.Variable.Changed"/> event. 
            </summary>
        </member>
        <member name="T:Syn.Bot.Common.Events.SettingsChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syn.Bot.Common.Settings.SettingsChanged"/> event.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Events.SettingsChangedEventArgs.Action">
            <summary>
            Gets the action that caused the event. 
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Events.SettingsChangedEventArgs.Variable">
            <summary>
            Gets the <see cref="T:Syn.Bot.Common.Interfaces.IVariable"/> involved in the change.
            </summary>
        </member>
        <member name="T:Syn.Bot.Common.Events.VariableChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syn.Bot.Common.Interfaces.IVariable.Changed"/> event.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.Events.VariableChangedEventArgs.#ctor(Syn.Bot.Common.Events.VariableChangedAction,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Common.Events.VariableChangedEventArgs"/> class.
            </summary>
            <param name="action">The action.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syn.Bot.Common.Events.VariableChangedEventArgs.Action">
            <summary>
            Gets the action that caused the event. 
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Events.VariableChangedEventArgs.Value">
            <summary>
            Gets the string value involved in the change.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Syn.Bot.Common.Extensions.SettingsExtensions.ApplyToProperties(Syn.Bot.Common.Settings,System.Object,System.String[])">
            <summary>
            Applies values to the proper public properties of the object specified using this <see cref="T:Syn.Bot.Common.Settings"/> instance.
            </summary>
            <param name="settings"></param>
            <param name="mainObject">The object whose properties are to be set.</param>
            <param name="settingNames">List of variable names to apply.</param>
            <remarks>
            Settings are only applied to Properties that have public setters. 
            If list of names are provided then the character '-' is ignored.
            </remarks>
        </member>
        <member name="M:Syn.Bot.Common.Extensions.VariableExtensions.ValueAs``1(Syn.Bot.Common.Interfaces.IVariable,``0)">
            <summary>
            Returns the <see cref="P:Syn.Bot.Common.Interfaces.IVariable.Value"/> as the <see cref="!:T"/> specified.
            </summary>
            <typeparam name="T">Return Type</typeparam>
            <param name="source">The source <see cref="T:Syn.Bot.Common.Interfaces.IVariable"/>.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Syn.Bot.Common.FunctionalVariable.#ctor(System.String,System.Func{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Common.FunctionalVariable"/> class.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="function">The function that returns a <see cref="T:System.String"/> value.</param>
        </member>
        <member name="E:Syn.Bot.Common.FunctionalVariable.Changed">
            <summary>
            This event is not triggered in <see cref="T:Syn.Bot.Common.FunctionalVariable"/>.
            </summary>
        </member>
        <member name="T:Syn.Bot.Common.Interfaces.IBinder`1">
            <summary>
            Provides an interface for binding return value of elements to attribute values.
            </summary>
            <typeparam name="TSimlContext">The type of the siml context.</typeparam>
        </member>
        <member name="T:Syn.Bot.Common.Interfaces.IBot">
            <summary>
            Default Interface implemented by <see cref="T:Syn.Bot.Siml.SimlBot"/> and <see cref="T:Syn.Bot.Oscova.OscovaBot"/>
            </summary>
        </member>
        <member name="T:Syn.Bot.Common.Interfaces.ICoreSimlAdapter">
            <summary>
            Core SIML Adapter interface.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Interfaces.ICoreSimlAdapter.IsRecursive">
            <summary>
            Gets a value indicating whether the children of this element will be processed prior to this.
            </summary>
            <value>
            <c>true</c> if this instance is recursive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Common.Interfaces.ICoreSimlAdapter.TagName">
            <summary>
            Gets the name of the tag.
            </summary>
            <value>
            The name of the tag.
            </value>
        </member>
        <member name="T:Syn.Bot.Common.Interfaces.ISimlParser">
            <summary>
            Interface that is to be implemented by all SIML document parsers.
            </summary>
        </member>
        <member name="T:Syn.Bot.Common.Interfaces.IVariable">
            <summary>
            An interface for SIML variable implementation.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Interfaces.IVariable.Name">
            <summary>
            Gets the name of this variable.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Interfaces.IVariable.Value">
            <summary>
            Gets or sets the main value of this variable.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Interfaces.IVariable.Owner">
            <summary>
            Gets or sets the <see cref="T:Syn.Bot.Common.Settings"/> that owns this <see cref="T:Syn.Bot.Common.Interfaces.IVariable"/>.
            </summary>
            <value>
            The owner <see cref="T:Syn.Bot.Common.Settings"/>
            </value>
        </member>
        <member name="P:Syn.Bot.Common.Interfaces.IVariable.List">
            <summary>
            Gets a list of all the values stored within this <see cref="T:Syn.Bot.Common.Variable"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Interfaces.IVariable.Count">
            <summary>
            Gets the number of values held by this variable.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.Interfaces.IVariable.Add(System.String)">
            <summary>
            Adds the specified value to this <see cref="T:Syn.Bot.Common.Variable"/>
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Syn.Bot.Common.Interfaces.IVariable.Remove(System.String)">
            <summary>
            Removes the specified value from this <see cref="T:Syn.Bot.Common.Variable"/>
            </summary>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:Syn.Bot.Common.Interfaces.IVariable.Contains(System.String)">
            <summary>
            Determines whether this <see cref="T:Syn.Bot.Common.Variable"/> contains the specified value.
            </summary>
            <param name="value">The value to search.</param>
            <returns>true if this <see cref="T:Syn.Bot.Common.Variable"/> contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Syn.Bot.Common.Interfaces.IVariable.Clear">
            <summary>
            Clears all values of this <see cref="T:Syn.Bot.Common.Variable"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Interfaces.IVariable.Clone">
            <summary>
            Gets the copy of this <see cref="T:Syn.Bot.Common.Variable"/>.
            </summary>
            <value>
            Deep copy of <see cref="T:Syn.Bot.Common.Variable"/>
            </value>
        </member>
        <member name="E:Syn.Bot.Common.Interfaces.IVariable.Changed">
            <summary>
            Occurs when the value of this <see cref="T:Syn.Bot.Common.Interfaces.IVariable"/> is changed.
            </summary>
        </member>
        <member name="T:Syn.Bot.Common.Interfaces.IVolatile">
            <summary>
            Interface to be implemented by volatile classes.
            </summary>
        </member>
        <member name="F:Syn.Bot.Common.Interfaces.MessageType.UserMessage">
            <summary>
            User message type.
            </summary>
            <remarks>This is the default value of <see cref="F:Syn.Bot.Common.Interfaces.MessageType.UserMessage"/>.</remarks>
        </member>
        <member name="F:Syn.Bot.Common.Interfaces.MessageType.EventMessage">
            <summary>
            An event message that is triggered when an internal event is fired.
            </summary>
        </member>
        <member name="F:Syn.Bot.Common.Interfaces.MessageType.None">
            <summary>
            Undefined message type.
            </summary>
        </member>
        <member name="T:Syn.Bot.Common.ScriptEngineCollection">
            <summary>
            Provides functionality to interact with internal Scripting Engines.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.ScriptEngineCollection.ExecuteScript(System.Xml.Linq.XElement)">
            <summary>
            Parses and executes the given Script element.
            </summary>
            <param name="scriptElement"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Common.ScriptEngineCollection.ExecuteScript(System.String,System.String)">
            <summary>
            Executes the given script.
            </summary>
            <param name="scriptType"></param>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Common.ScriptEngineCollection.Contains(System.String)">
            <summary>
            Gets a value indicating if an <see cref="T:Syn.Bot.Common.Interfaces.IScriptEngine"/> exists for the script type provided.
            </summary>
            <param name="scriptType"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Common.Settings.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Common.Settings"/> class.
            </summary>
            <param name="name">The settings name.</param>
            <param name="location">The location where the settings is to be stored.</param>
        </member>
        <member name="M:Syn.Bot.Common.Settings.Bind(Syn.Bot.Common.Settings)">
            <summary>
            Binds the current settings to the specified settings.
            </summary>
            <param name="settings">The settings to bind to.</param>
            <remarks>Bind a Settings to another settings clears its existing variable table.</remarks>
        </member>
        <member name="M:Syn.Bot.Common.Settings.Load(Syn.Bot.Common.Settings)">
            <summary>
            Loads the specified settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Syn.Bot.Common.Settings.Add(System.String,System.Func{System.String})">
            <summary>
            Adds the specified variable name.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="function">The function that returns a string value.</param>
        </member>
        <member name="M:Syn.Bot.Common.Settings.Remove(System.String)">
            <summary>
            Removes the variable with the specified name.
            </summary>
            <param name="variableName">Name of the variable.</param>
        </member>
        <member name="M:Syn.Bot.Common.Settings.RaiseSettingsChanged(Syn.Bot.Common.Events.SettingsChangedEventArgs)">
            <summary>
            Raises the <see cref="E:VariableChanged" /> event.
            </summary>
            <param name="eventArgs">The <see cref="T:Syn.Bot.Common.Events.SettingsChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syn.Bot.Common.Settings.TryGetValue(System.String,System.String@)">
            <summary>
            Tries to get the value of a variable.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="variableValue">value of the variable.</param>
            <returns>true if the variable was found; otherwise false.</returns>
        </member>
        <member name="M:Syn.Bot.Common.Settings.GetValue(System.String)">
            <summary>
            Gets the main value of the specified variable.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <returns>Value of the variable if it exists otherwise returns the default value.</returns>
        </member>
        <member name="M:Syn.Bot.Common.Settings.Contains(System.String)">
            <summary>
            Determines whether this <see cref="T:Syn.Bot.Common.Settings"/> instance contains the specified variable.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <returns>
              <c>true</c> if specified variable is found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="E:Syn.Bot.Common.Settings.SettingsChanged">
            <summary>
            Occurs when a variable is added or removed.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.SimlAdapters.BaseIfAdapter.IsRecursive">
            <summary>
            False - Processing of inner nodes should only be done if a condition is satisfied.
            </summary>
        </member>
        <member name="T:Syn.Bot.Common.SimlPackage">
            <summary>
            Represents an SIML Package.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.SimlPackage.Parse(System.String)">
            <summary>
            Parses the specified package string.
            </summary>
            <param name="packageString">The package string.</param>
        </member>
        <member name="F:Syn.Bot.Common.SimlProfile.Classic">
            <summary>
            Classic SIML
            </summary>
        </member>
        <member name="F:Syn.Bot.Common.SimlProfile.Modern">
            <summary>
            Modern SIML
            </summary>
        </member>
        <member name="F:Syn.Bot.Common.SimlProfile.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Syn.Bot.Common.SimlProject">
            <summary>
            In-Built SIML Project manager.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.SimlProject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Common.SimlProject" /> class.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.SimlProject.Load(System.String)">
            <summary>
            Loads SIML documents from SIML Project file (.simlproj).
            </summary>
            <param name="filePath">The SIML project file path.</param>
        </member>
        <member name="M:Syn.Bot.Common.SimlProject.Save">
            <summary>
            Saves the SIML Project file to <see cref="P:Syn.Bot.Common.SimlProject.FilePath"/>.
            </summary>
        </member>
        <member name="T:Syn.Bot.Common.SimlTags">
            <summary>
            Container for known SIML element names and attributes.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.SimlTags.KnownTags">
            <summary>
            Gets a list of all known tags.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.SimlTags.KnownAttributes">
            <summary>
            Gets a list of all known attributes.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.SimlTags.DeprecatedTags">
            <summary>
            Gets the deprecated tags.
            </summary>
            <value>
            The deprecated tags.
            </value>
        </member>
        <member name="P:Syn.Bot.Common.SimlTags.KnownDeprecatedHtmlTags">
            <summary>
            Gets the known deprecated HTML tags.
            </summary>
            <value>
            The known deprecated HTML tags.
            </value>
        </member>
        <member name="P:Syn.Bot.Common.SimlTags.KnownHtmlTags">
            <summary>
            Gets a list of all the known HTML tags.
            </summary>
            <value>
            The known HTML tags.
            </value>
        </member>
        <member name="P:Syn.Bot.Common.SimlTags.KnownSymbols">
            <summary>
            Gets a lsit of all the known symbols valid within the Pattern element.
            </summary>
            <value>
            The known symbols.
            </value>
        </member>
        <member name="T:Syn.Bot.Common.UserSettings">
            <summary>
            A Settings class for <see cref="T:Syn.Bot.Common.Interfaces.IBotUser"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.UserSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Common.UserSettings"/> class.
            </summary>
        </member>
        <member name="T:Syn.Bot.Common.Variable">
            <summary>
            Represents an SIML variable.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.Variable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Common.Variable"/> class.
            </summary>
            <param name="name">Name of the <see cref="T:Syn.Bot.Common.Variable"/></param>
        </member>
        <member name="P:Syn.Bot.Common.Variable.Name">
            <summary>
            Gets the name of this variable.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Variable.Value">
            <summary>
            Gets or sets the main value of this variable.
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Variable.Owner">
            <summary>
            Gets or sets the <see cref="T:Syn.Bot.Common.Settings" /> that owns this <see cref="T:Syn.Bot.Common.Interfaces.IVariable" />.
            </summary>
            <value>
            The owner <see cref="T:Syn.Bot.Common.Settings" />
            </value>
        </member>
        <member name="P:Syn.Bot.Common.Variable.List">
            <summary>
            Gets a list of all the values stored within this <see cref="T:Syn.Bot.Common.Variable"/>
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.Variable.Add(System.String)">
            <summary>
            Adds the specified value to this <see cref="T:Syn.Bot.Common.Variable"/>
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Syn.Bot.Common.Variable.Remove(System.String)">
            <summary>
            Removes the specified value from this <see cref="T:Syn.Bot.Common.Variable"/>
            </summary>
            <param name="value">The value to remove.</param>
        </member>
        <member name="P:Syn.Bot.Common.Variable.Count">
            <summary>
            Gets the number of values held by this variable.
            </summary>
        </member>
        <member name="M:Syn.Bot.Common.Variable.Contains(System.String)">
            <summary>
            Determines whether this <see cref="T:Syn.Bot.Common.Variable"/> contains the specified value.
            </summary>
            <param name="value">The value to search.</param>
            <returns>true if this <see cref="T:Syn.Bot.Common.Variable"/> contains the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Syn.Bot.Common.Variable.Clear">
            <summary>
            Clears all values of this <see cref="T:Syn.Bot.Common.Variable"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Common.Variable.Clone">
            <summary>
            Gets the copy of this <see cref="T:Syn.Bot.Common.Variable"/>.
            </summary>
            <value>
            Deep copy of <see cref="T:Syn.Bot.Common.Variable"/>
            </value>
        </member>
        <member name="M:Syn.Bot.Common.Variable.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the value of this variable.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the value of this variable.
            </returns>
        </member>
        <member name="E:Syn.Bot.Common.Variable.Changed">
            <summary>
            Occurs when the value of this <see cref="T:Syn.Bot.Common.Interfaces.IVariable" /> is changed.
            </summary>
        </member>
        <member name="T:Syn.Bot.Common.VarSettings">
            <summary>
            Represents an arbitrary container for temporary variables.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.AdapterNode">
            <summary>
            Represents an adapter evaluation context
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.AdapterNode.#ctor(System.Xml.Linq.XElement,Syn.Bot.Oscova.Response,Syn.Bot.Oscova.Context,Syn.Bot.Oscova.Result)">
            <summary>
            Initializes a new instance of <see cref="T:Syn.Bot.Oscova.AdapterNode"/> class.
            </summary>
            <param name="element">The adapter element.</param>
            <param name="context">The user context.</param>
            <param name="result">The invoked result.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.AdapterNode.CurrentResponse">
            <summary>
            Gets the current response object that is sent to the bot at the end of interpretation.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.AdapterNode.Context">
            <summary>
            Gets the session context.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.AdapterNode.Result">
            <summary>
            Gets the invoked <see cref="P:Syn.Bot.Oscova.AdapterNode.Result"/>.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.AdapterNode.Element">
            <summary>
            Gets or sets the SIML element.
            </summary>
            <value>
            The SIML element.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.AdapterNode.Clone">
            <summary>
            Returns a clone of this <see cref="T:Syn.Bot.Oscova.AdapterNode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Oscova.Attributes.ActionAttribute">
            <summary>
            Indicates that the method is an OSCOVA action.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.ActionAttribute.ID">
            <summary>
            Gets or sets the action identifier.
            </summary>
            <value>
            The action identifier.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.Attributes.ContextAttribute">
            <summary>
            Represents a user session conversation context.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Syn.Bot.Oscova.Attributes.ContextAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Syn.Bot.Oscova.Attributes.ContextAttribute"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syn.Bot.Oscova.Attributes.ContextAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Syn.Bot.Oscova.Attributes.ContextAttribute"/>.
            </summary>
            <param name="name">Name of context</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.ContextAttribute.Name">
            <summary>
            Gets the context name.
            </summary>
            <value>
            The context name.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.Attributes.DialogAttribute">
            <summary>
            [EXPERIMENTAL]: Please do not use this attribute at the moment.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.DialogAttribute.Name">
            <summary>
            Gets or sets the name of the dialog.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.DialogAttribute.Domain">
            <summary>
            Gets or sets the domain of the dialog.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.DialogAttribute.IntentAlias">
            <summary>
            Gets or sets a default intent name for all child intents.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Attributes.EntityAttribute">
            <summary>
            Represents an Entity.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Syn.Bot.Oscova.Attributes.EntityAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Attributes.EntityAttribute"/> class.
            </summary>
            <param name="type">The entity type.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.EntityAttribute.Type">
            <summary>
            Gets the entity type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.Attributes.EntityExampleAttribute">
            <summary>
            Specifies entity type examples for entity recognizers.
            </summary>
            <remarks>To be used on classes that implement <see cref="T:Syn.Bot.Oscova.Interfaces.IEntityRecognizer"/> interface.</remarks>
        </member>
        <member name="T:Syn.Bot.Oscova.Attributes.EventAttribute">
            <summary>
            Indicates that the method is an OSCOVA Event.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.EventAttribute.Name">
            <summary>
            Gets or sets the event name.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Attributes.ExpressionAttribute">
            <summary>
            Represents a user input expression.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Attributes.ExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Attributes.ExpressionAttribute"/> class.
            </summary>
            <param name="expression">The user input expression.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Attributes.ExpressionAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Attributes.ExpressionAttribute"/> class.
            </summary>
            <param name="expression">The user input expression.</param>
            <param name="entityTypes">The entity types.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Attributes.ExpressionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Attributes.ExpressionAttribute"/> class.
            </summary>
            <remarks>Declares an Empty Expression.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.ExpressionAttribute.Value">
            <summary>
            Gets or sets the expression value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.ExpressionAttribute.Name">
            <summary>
            Gets or sets the expression name.
            </summary>
            <value>
            The expression name.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.Attributes.FallbackAttribute">
            <summary>
            Declares a Fallback intent.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.FallbackAttribute.Context">
            <summary>
            Gets or sets a context name for this fallback. Making this fallback a contextual fallback.
            </summary>
            <remarks>This property must only be used to create fallbacks for expressions with entities.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.IntentAttribute.Name">
            <summary>
            Gets or sets the intent name.
            </summary>
            <value>
            The intent name.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.IntentAttribute.MinScore">
            <summary>
            Gets or sets the minimum score required for intent evaluation.
            </summary>
            <remarks>Default value is <c>0f</c></remarks>
        </member>
        <member name="T:Syn.Bot.Oscova.Attributes.PromptAttribute">
            <summary>
            Represents a Prompt message that is returned when the specified entity is missing.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Syn.Bot.Oscova.Attributes.PromptAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Attributes.PromptAttribute"/> class.
            </summary>
            <param name="missingEntityType">Type of the missing entity.</param>
            <param name="promptMessage">The prompt message to display when the specified entity is missing.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.PromptAttribute.EntityType">
            <summary>
            Gets the type of the missing entity type.
            </summary>
            <value>
            The type of the missing entity.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.PromptAttribute.Message">
            <summary>
            Gets the prompt message.
            </summary>
            <value>
            The prompt message.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.PromptAttribute.Context">
            <summary>
            Gets or sets the context name to use for this Prompt.
            </summary>
            <remarks>If a context name is not provided Oscova auto-generates a context name. This property must only be used for declaring explicit prompt fallbacks. The lifespan of this context will be 1.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.TraitAttribute.Type">
            <summary>
            Gets or sets the <see cref="T:Syn.Bot.Oscova.Attributes.TraitAttribute"/> type.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Attributes.TraitAttribute.Fields">
            <summary>
            Gets or sets fields that replace specified placeholders with values.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.BotConfiguration">
            <summary>
            Represents the Bot configuration used by various components.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.BotConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.BotConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.EnableContextUndo">
            <summary>
            Gets or sets a value indicating if current user's contextual states can be reveresed.
            </summary>
            <remarks>Default value is <c>false</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.RenderMissingVariable">
            <summary>
            Gets or sets a value indicating if a missing variable name should be rendered.
            </summary>
            <remarks>Default value is <c>false</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.RemoveIdleUsers">
            <summary>
            Gets or sets a value indicating if idle users should be removed.
            </summary>
            <remarks>Default value is <c>false</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.MaxUserIdleInterval">
            <summary>
            Gets or sets a value specifying a maximum idle time after which a user is declared idle.
            </summary>
            <remarks>Default value is <see cref="F:System.TimeSpan.MaxValue"/></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.ReplaceResponseVariable">
            <summary>
            Gets or sets a value indicating whether variables in responses must be parsed.
            </summary>
            <value>
            <c>true</c> if response variables are to be parsed; otherwise, <c>false</c>.
            </value>
            <remarks>Default value is <c>true</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.IntentNameProvider">
            <summary>
            Gets or sets the Intent Name provider delegate.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.Scoring">
            <summary>
            Gets the scoring configuration.
            </summary>
            <value>
            The scoring configuration
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.RequiredRecognizersOnly">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syn.Bot.Oscova.OscovaBot"/> should load only required entity recognizers.
            </summary>
            <value>
              <c>true</c> if required parsers only; otherwise, <c>false</c>.
            </value>
            <remarks>Default is <c>false</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.MaxIntentCount">
            <summary>
            Gets or sets the maximum number of intents to return after evaluation.
            </summary>
            <value>
            The maximum intent count.
            </value>
            <remarks>Default is <c>5</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.ContextLifespan">
            <summary>
            Gets or sets the default context request lifespan.
            </summary>
            <value>
            The context request lifespan.
            </value>
            <remarks>A <see cref="T:Syn.Bot.Oscova.ContextItem"/> is removed after being idle for the specified lifespan.</remarks>
            <remarks>Default is <c>5</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.ShowIntentInterpretation">
            <summary>
            Gets or sets a value indicating whether intent interpretation must be serialized.
            </summary>
            <value>
            <c>true</c> if intent interpretation must be serialized; otherwise, <c>false</c>.
            </value>
            <remarks>Default is <c>false</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.UseFullIntentName">
            <summary>
            Gets or sets a value indicating whether to use full intent name.
            </summary>
            <value>
              <c>true</c> if use full intent name; otherwise, <c>false</c>.
            </value>
            <remarks>
            A full intent name combines the dialog class name and intent method name.
            Default is <c>true</c>
            </remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.StoreUserHistory">
            <summary>
            Gets or sets a value indicating whether user requests are to be stored.
            </summary>
            <value>
              <c>true</c> if user requests are to be store; otherwise, <c>false</c>.
            </value>
            <remarks>Default is <c>true</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.UserHistoryLimit">
            <summary>
            Gets or sets the user history limit.
            </summary>
            <value>
            The user history limit.
            </value>
            <remarks>Default is <c>10</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.MainUserId">
            <summary>
            Gets or sets the main user identifier.
            </summary>
            <value>
            The main user identifier.
            </value>
            <remarks>If this value is changed during run-time the ID of <see cref="P:Syn.Bot.Oscova.OscovaBot.MainUser"/> gets changed as well.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.BotId">
            <summary>
            Gets or sets the bot identifier.
            </summary>
            <value>
            The bot identifier.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.EndToEndEncryption">
            <summary>
            Gets or sets a value indicating if <see cref="P:Syn.Bot.Oscova.Request.Text"/> must be decrypted using <see cref="P:Syn.Bot.Oscova.OscovaBot.Cryptographer"/> prior to evaluation.
            </summary>
            <remarks>Default value is <c>false</c>. Must only be enabled if a custom implementation of <see cref="T:Syn.Bot.Oscova.Interfaces.ICryptographer"/> is provided.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.CheckIntentNames">
            <summary>
            Gets or sets a value indicating if duplicate intent names must be checked.
            </summary>
            <remarks>Default value is <c>true</c>.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotConfiguration.RemoveContextOnFallback">
            <summary>
            Gets or sets a value indicating if on contextual fallback the Context name should be removed.
            </summary>
            <remarks>Default value is <c>false</c>.</remarks>
        </member>
        <member name="T:Syn.Bot.Oscova.BotStats">
            <summary>
            Container class that holds performance statistics of <see cref="T:Syn.Bot.Oscova.OscovaBot"/>.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotStats.DialogCount">
            <summary>
            Gets the number of dialogs.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotStats.IntentCount">
            <summary>
            Gets the number of intents.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotStats.ExpressionCount">
            <summary>
            Gets the number of expressions
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotStats.RecognizerCount">
            <summary>
            Gets the number of recognizers.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotStats.FilterCount">
            <summary>
            Gets the number of filters.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotStats.ActionCount">
            <summary>
            Gets the number of actions.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotStats.ProcessingTime">
            <summary>
            Gets the average request processing time.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotStats.NormalizationTime">
            <summary>
            Gets the average request normalization time.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotStats.TokenizationTime">
            <summary>
            Gets the average request tokenization time.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotStats.EntityExtractionTime">
            <summary>
            Gets the average entity extraction time.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.BotUser">
            <summary>
            Represents an OSCOVA user.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotUser.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.BotUser.LocalVariables">
            <summary>
            Gets the temporary variables the lifetime of which is 1 intent invocation.
            </summary>
            <value>
            The local variable collection.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.BotUser.Context">
            <summary>
            Gets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.BotUser.Domains">
            <summary>
            Gets the domains collection.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotUser.LastInteractionTime">
            <summary>
            Gets the last interaction time.
            </summary>
            <value>
            The last interaction time.
            </value>
            <remarks>This property maybe used to remove idle users.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotUser.IsIdle">
            <summary>
            Gets a value indicating whether this user is idle.
            </summary>
            <value>
              <c>true</c> if this user is idle; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.BotUser.IdleInterval">
            <summary>
            Gets the idle time for the user.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.BotUser.ID">
            <summary>
            Gets the user ID.
            </summary>
            <value>
            The user identifier.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.BotUser.IsMain">
            <summary>
            Gets a value indicating whether this user is the main bot user.
            </summary>
            <value>
              <c>true</c> if this user is the main bot user; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.BotUser.Requests">
            <summary>
            Gets a list of stored requests made by the user.
            </summary>
            <value>
            The stored list of requests.
            </value>
            <remarks>Stores a maximum of 10 values. To change this limit edit <see cref="P:Syn.Bot.Oscova.BotConfiguration.UserHistoryLimit"/>.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.BotUser.Responses">
            <summary>
            Gets a list of stored responses received by the user.
            </summary>
            <value>
            The stored list of received responses.
            </value>
            <remarks>Stores a maximum of 10 values. To change this limit edit <see cref="P:Syn.Bot.Oscova.BotConfiguration.UserHistoryLimit"/>.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.BotUser.CreateRequest">
            <summary>
            Creates a new empty user request.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.BotUser.CreateRequest(System.String)">
            <summary>
            Creates a new user request with the specified message.
            </summary>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.BotUser.GetState">
            <summary>
            Gets a JSON string representing the state of this bot user.
            </summary>
            <returns>JSON string.</returns>
        </member>
        <member name="M:Syn.Bot.Oscova.BotUser.SetState(System.String)">
            <summary>
            Sets the state of this bot user from the JSON string provided.
            </summary>
            <param name="jsonString">JSON string.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.BotUser.SaveState(System.String)">
            <summary>
            Saves JSON string representation of this user state to the specified file.
            </summary>
            <param name="filename">file path.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.BotUser.LoadState(System.String)">
            <summary>
            Loads the state of this bot user from the specified file.
            </summary>
            <param name="filename">file path.</param>
        </member>
        <member name="E:Syn.Bot.Oscova.BotUser.ResponseReceived">
            <summary>
            Occurs when a <see cref="T:Syn.Bot.Oscova.Response"/> is received by this <see cref="T:Syn.Bot.Oscova.BotUser"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.BotUserCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.BotUserCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.BotUserCollection.Add(Syn.Bot.Oscova.BotUser)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.BotUserCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.BotUserCollection.Contains(Syn.Bot.Oscova.BotUser)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.BotUserCollection.Contains(System.String)">
            <summary>
            Returns a value indicating if a user with the specified id exists.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.BotUserCollection.CopyTo(Syn.Bot.Oscova.BotUser[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.BotUserCollection.Remove(Syn.Bot.Oscova.BotUser)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Syn.Bot.Oscova.Collections.BotUserCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Collections.BotUserCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="E:Syn.Bot.Oscova.Collections.BotUserCollection.UserAdded">
            <summary>
            Occurs when a user is created.
            </summary>
        </member>
        <member name="E:Syn.Bot.Oscova.Collections.BotUserCollection.UserRemoved">
            <summary>
            Occurs when a user is removed
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Collections.DialogCollection.HasDefaultFallback">
            <summary>
            Gets a value indicating whether this collection contains Default Fallback Intent.
            </summary>
            <value>
            <c>true</c> if this collection has Default Fallback Intent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.DisabledIntent.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Syn.Bot.Oscova.Collections.DisabledIntent"/>
            </summary>
            <param name="name">Name of the intent.</param>
            <param name="span">Request lifespan.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Collections.DisabledIntent.Name">
            <summary>
            Name of the intent.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Collections.DisabledIntent.Span">
            <summary>
            Number of requests the intent is meant to be disabled for.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.DisabledIntentCollection.Add(System.String,System.Int32)">
            <summary>
            Adds an intent by name which is disabled for the specified number of requests.
            </summary>
            <param name="name">Name of the intent.</param>
            <param name="span">Number of requests the intent should be disabled for.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.DisabledIntentCollection.Add(System.String)">
            <summary>
            Adds an intent name which is disabled permanently for this user.
            </summary>
            <param name="name">Name of the intent.</param>
        </member>
        <member name="T:Syn.Bot.Oscova.Collections.EntityCollection">
            <summary>
            An entity collection that holds extracted entities.
            </summary>
            <seealso cref="T:Syn.Bot.Oscova.Interfaces.IEntity" />
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Collections.EntityCollection"/> class.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.#ctor(System.Collections.Generic.IEnumerable{Syn.Bot.Oscova.Interfaces.IEntity})">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Collections.EntityCollection"/> class.
            </summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.AddRange(System.Collections.Generic.IEnumerable{Syn.Bot.Oscova.Interfaces.IEntity})">
            <summary>
            Adds the range.
            </summary>
            <param name="entities">The entities.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Collections.EntityCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syn.Bot.Oscova.Interfaces.IEntity"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:Syn.Bot.Oscova.Interfaces.IEntity"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains the specified entity type.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns>
              <c>true</c> if this colleciont containss the specified entity type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.Remove(System.String)">
            <summary>
            Removes all entities of the specified entity type.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.OfType(System.String)">
            <summary>
            Gets the first entity of the specified type name or alias.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.AllOfType(System.String)">
            <summary>
            Gets entities of the specified type name or alias.
            </summary>
            <param name="entityName">Type of the entity.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.OfType``1(System.String)">
            <summary>
            Gets an entity of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.OfCompositeType(System.String)">
            <summary>
            Gets a <see cref="T:Syn.Bot.Oscova.Interfaces.ICompositeEntity"/> entity of the specified type.
            </summary>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.AllOfType``1(System.String)">
            <summary>
            Gets all entities of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.AllOfType``1">
            <summary>
            Gets all entities of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.OfType``1">
            <summary>
            Gets an entity of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.IndexOf(System.String)">
            <summary>
            Gets the index of the specified entity type or alias.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <remarks>Returns -1 if no entity is found.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.IndexOf(Syn.Bot.Oscova.Interfaces.IEntity)">
            <summary>
            Gets the index of the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <remarks>Returns -1 if the specified entity is not found in this collection.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.Add(Syn.Bot.Oscova.Interfaces.IEntity)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.Contains(Syn.Bot.Oscova.Interfaces.IEntity)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.CopyTo(Syn.Bot.Oscova.Interfaces.IEntity[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntityCollection.Remove(Syn.Bot.Oscova.Interfaces.IEntity)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Syn.Bot.Oscova.Collections.EntityCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Collections.EntityCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Collections.Entry">
            <summary>
            Holds information for entries added to <see cref="T:Syn.Bot.Oscova.Collections.EntryCollection"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.Entry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Collections.Entry"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Collections.Entry.Value">
            <summary>
            Gets the entry value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Collections.Entry.Reference">
            <summary>
            Gets the reference value.
            </summary>
            <value>
            The reference.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Collections.Entry.Index">
            <summary>
            Gets or sets the index of this in its parent collection.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntryCollection.OrderByEntryLength">
            <summary>
            Orders the collection based on the length of item values.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntryCollection.AddSynonyms(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the synonyms as entries with <paramref name="item"/> as the <see cref="P:Syn.Bot.Oscova.Collections.Entry.Reference"/>.
            </summary>
            <param name="item">The item.</param>
            <param name="synonymsList">The synonyms list.</param>
            <remarks><paramref name="item"/>is not added as an entry.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntryCollection.MakeFuzzy(Syn.Bot.Oscova.OscovaBot)">
            <summary>
            Creates permutations of entry values for fuzzy matching.
            </summary>
            <param name="bot">The Oscova bot instance.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntryCollection.ImportFromFile(System.String,Syn.Bot.Oscova.EntityDataFormat)">
            <summary>
            Imports reference values and synonyms from the file specified.
            </summary>
            <param name="filePath">File path</param>
            <param name="dataFormat">Data format of the file specified</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.EntryCollection.ImportFromText(System.String,Syn.Bot.Oscova.EntityDataFormat)">
            <summary>
            Imports reference values and synonyms from the specified text
            </summary>
            <param name="text">Text string</param>
            <param name="dataFormat">Format of the textual data</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Collections.IntentAction.ID">
            <summary>
            To be set only by Actions.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Collections.IntentEvent.EventName">
            <summary>
            To be set only by Actions.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Collections.KnowledgeBase">
            <summary>
            Generic container for settings and value storage for minimal memory footprint.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.QuickIntentCollection.Add(System.String,System.String)">
            <summary>
            Adds the specified template expression and response as a quick intent.
            </summary>
            <param name="templateExpression">The template expression.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.QuickIntentCollection.Add(System.String,Syn.Bot.Oscova.Delegates.Responder)">
            <summary>
            Adds the specified template expression and <see cref="T:Syn.Bot.Oscova.Delegates.Responder"/> as a quick intent.
            </summary>
            <param name="templateExpression">The template expression.</param>
            <param name="responder">The responder.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.RecognizerCollection.RegisterType``1(System.String)">
            <summary>
            Registers a <see cref="T:Syn.Bot.Oscova.Interfaces.IEntityRecognizer"/> type. An instance of which is created only when necessary.
            </summary>
            <typeparam name="T"><see cref="T:Syn.Bot.Oscova.Interfaces.IEntityRecognizer"/> type.</typeparam>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.RecognizerCollection.LoadType(System.String)">
            <summary>
            Loads a previously registered <see cref="T:Syn.Bot.Oscova.Interfaces.IEntityRecognizer"/> for the specified entity type.
            </summary>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.RecognizerCollection.IsCompositeType(System.String)">
            <summary>
            Determines whether the specified entity type is composite.
            </summary>
            <param name="typeName">Name of the entity type.</param>
            <returns>
              <c>true</c> if entity type is composite; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.RecognizerCollection.SetOverridable(System.String,System.String)">
            <summary>
            Sets the overriding for overlapping entities.
            </summary>
            <param name="sourceEntity">The source entity.</param>
            <param name="targetEntity">The target entity that will be overridden.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.RecognizerCollection.RemoveOverriable(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sourceEntity"></param>
            <param name="targetEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.RecognizerCollection.CanOverride(Syn.Bot.Oscova.Interfaces.IEntity,Syn.Bot.Oscova.Interfaces.IEntity)">
            <summary>
            Returns a value indicating if the source entity can override the target entity type.
            </summary>
            <param name="sourceEntity">The source entity.</param>
            <param name="targetEntity">The target entity.</param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Oscova.Collections.RecognizerCollection.Item(System.String)">
            <summary>
            Gets an <see cref="T:Syn.Bot.Oscova.Interfaces.IEntityRecognizer"/> that recognizes the specified entity type.
            </summary>
            <param name="entityType"></param>
            <remarks>
            Returns the found entity recognizer if it has been added or registered.
            Returns <c>null</c> if an entity recognizer for the specified type is not found.
            </remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.RecognizerCollection.Contains(System.String)">
            <summary>
            Gets a value indicating if an <see cref="T:Syn.Bot.Oscova.Interfaces.IEntityRecognizer"/> exists for the specified entity type.
            </summary>
            <param name="entityType">The entity type.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Collections.RecognizerCollection.ExtractEntities(Syn.Bot.Oscova.Request)">
            <summary>
            Extracts known entities from <see cref="T:Syn.Bot.Oscova.Request"/>.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Collections.RecognizerCollection.OverlapManager">
            <summary>
            Gets or sets the overlap manager.
            </summary>
            <value>
            The overlap manager.
            </value>
        </member>
        <member name="E:Syn.Bot.Oscova.Collections.RecognizerCollection.EntityRecognized">
            <summary>
            Occurs when an entity is created by <see cref="T:Syn.Bot.Oscova.Interfaces.IEntityRecognizer"/>.
            </summary>
        </member>
        <member name="E:Syn.Bot.Oscova.Collections.RecognizerCollection.EntitiesExtracted">
            <summary>
            Occurs when a collection of entities have been extracted from a user <see cref="T:Syn.Bot.Oscova.Request"/>.
            </summary>
        </member>
        <member name="E:Syn.Bot.Oscova.Collections.RecognizerCollection.CompositeEntityCreated">
            <summary>
            Occurs when a composite entity is created.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Context">
            <summary>
            Represents a conversion context.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Undo">
            <summary>
            Reverts the state of the contexts one step backward.
            </summary>
            <remarks>Undoing also adjusts the <see cref="P:Syn.Bot.Oscova.ContextItem.Lifespan"/> of all non-conditional <see cref="T:Syn.Bot.Oscova.ContextItem"/>s.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Context.Item(System.String)">
            <summary>
            Gets the <see cref="T:Syn.Bot.Oscova.ContextItem"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:Syn.Bot.Oscova.ContextItem"/>.
            </value>
            <param name="contextName">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Add(Syn.Bot.Oscova.ContextItem)">
            <summary>
            Adds the context item to context collection. 
            If the context item already exists then the older context item is removed and new one is added.
            </summary>
            <param name="item">The <see cref="T:Syn.Bot.Oscova.ContextItem"/></param>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Create(System.String)">
            <summary>
            Adds a context and returns the <see cref="T:Syn.Bot.Oscova.ContextItem"/>.
            </summary>
            <param name="contextName">Context name.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Create(System.String,System.Int32)">
            <summary>
            Adds a context with the specified lifespan and returns the <see cref="T:Syn.Bot.Oscova.ContextItem"/>.
            </summary>
            <param name="contextName">Context name.</param>
            <param name="lifeSpan">context lifespan.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Create(System.Enum)">
            <summary>
            Adds a context with the specified enum value as context name and returns <see cref="T:Syn.Bot.Oscova.ContextItem"/>.
            </summary>
            <param name="enumValue">Enum value.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Create(System.Enum,System.Int32)">
            <summary>
            Adds a context with the specified enum value as context name and lifespan and returns <see cref="T:Syn.Bot.Oscova.ContextItem"/>.
            </summary>
            <param name="enumValue">Enum value.</param>
            <param name="lifeSpan">Context lifespan.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Add(System.String)">
            <summary>
            Adds a context item with the specified name and default lifespan.
            </summary>
            <param name="contextName">The context name.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Add(System.String,System.Int32)">
            <summary>
            Adds a context item with the specified name and lifespan.
            </summary>
            <param name="contextName">The context name.</param>
            <param name="lifeSpan">The life-span of the context.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Add(System.Enum,System.Int32)">
            <summary>
            Adds a context item with the specified enum value as name and provided lifespan.
            </summary>
            <param name="enumValue">The enum value.</param>
            <param name="lifespan">The lifespan.</param>
            <remarks>The <see cref="P:Syn.Bot.Oscova.ContextItem.Name" /> is the string value of the provided enum.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Contains(Syn.Bot.Oscova.ContextItem)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Contains(System.String)">
            <summary>
            Determines whether the specified context name exists.
            </summary>
            <param name="name">The name.</param>
            <returns>
              <c>true</c> if a context with the specified name exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Remove(Syn.Bot.Oscova.ContextItem)">
            <summary>
            Removes the specified context item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Context.Remove(System.String)">
            <summary>
            Removes a context with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Oscova.Context.Count">
            <summary>
            Returns the number of context items added.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Context.SessionEntities">
            <summary>
            Gets the session entities that lasts till the interaction with the bot has ended.
            </summary>
            <value>
            The session entities.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Context.SessionData">
            <summary>
            Gets the session data that lasts till the interaction with the bot has ended.
            </summary>
            <value>
            The session data.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.ContextItem">
            <summary>
            Represents a context item with name and lifespan.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.ContextItem.RenewLifespan">
            <summary>
            Renews the context lifespan.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.ContextItem.Parameters">
            <summary>
            Gets the contextual parameters.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.ContextItem.Name">
            <summary>
            Gets the context name.
            </summary>
            <value>
            The context name.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.ContextItem.Lifespan">
            <summary>
            Gets the context lifespan.
            </summary>
            <value>
            The context lifespan.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.ContextItem.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Syn.Bot.Oscova.ContextItem.Empty">
            <summary>
            Represents an empty context item. This field is read-only.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.ContextParameter">
            <summary>
            Represents a <see cref="T:Syn.Bot.Oscova.ContextItem"/> parameter.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.ContextParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.ContextParameter.Value">
            <summary>
            Gets the parameter value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.Delegates.EntityExtractor">
            <summary>
            A custom method that evaluates the <see cref="T:Syn.Bot.Oscova.Request"/> and returns extracted entities.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Oscova.Delegates.IsActiveProvider">
            <summary>
            Any custom method that determines whether the current context item is active.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Oscova.Dialog">
            <summary>
            Represent an <see cref="T:Syn.Bot.Oscova.OscovaBot"/> dialog system with Intents.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Dialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Dialog"/> class.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Dialog.IsEnabled">
            <summary>
            Gets or sets a value indicating if this dialog and all its children intents must be evaluated.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Dialog.QuickIntents">
            <summary>
            Gets the quick intent collection.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Dialog.DialogName">
            <summary>
            Gets or sets the name of this dialog.
            </summary>
            <value>
            The dialog name.
            </value>
            <remarks>If the name is not overriden then type name is returned.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Dialog.Domain">
            <summary>
            Gets or sets the domain this dialog belongs to.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Dialog.IntentAlias">
            <summary>
            Gets or sets the Intent alias value that is given to all un-named Intents.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Entities.AmountUnitEntity.ToString">
            <summary>
            Returns the <see cref="P:Syn.Bot.Oscova.Entities.AmountUnitEntity.Value"/> part of this entity.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Entities.Entity">
            <summary>
            Represents an OSCOVA Entity.
            </summary>
            <remarks>
            Core implementation of <see cref="T:Syn.Bot.Oscova.Interfaces.IEntity"/> interface. 
            All in-built <see cref="T:Syn.Bot.Oscova.Recognizers.EntityRecognizer"/> and <see cref="T:Syn.Bot.Oscova.Recognizers.RegexRecognizer"/> return instances of this class.
            </remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.Entities.Entity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Entities.Entity"/> class.
            </summary>
            <param name="entityType">The entity type.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Entities.Entity.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Entities.Entity"/> class.
            </summary>
            <param name="type">The entity type.</param>
            <param name="value">The matched value in user input.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Entities.Entity.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Entities.Entity"/> class.
            </summary>
            <param name="type">The entity type.</param>
            <param name="value">The matched value.</param>
            <param name="referenceValue">The reference value.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Entities.Entity.Reference">
            <summary>
            Gets or sets the reference value.
            </summary>
            <value>
            The reference.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Entities.Entity.Value">
            <summary>
            Gets the matched value in user input.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Entities.Entity.Type">
            <summary>
            Gets or sets the entity type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Entities.Entity.Index">
            <summary>
            Gets the match index.
            </summary>
            <value>
            The index.
            </value>
            <remarks>
            Default value is <c>-1</c> which denotes that an index is not set.
            </remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.Entities.Entity.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            <remarks>If this entity holds a <see cref="P:Syn.Bot.Oscova.Entities.Entity.Reference"/> then the reference value is returned. Otherwise <see cref="P:Syn.Bot.Oscova.Entities.Entity.Value"/> is returned.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.Entities.MathExpressionEntity.ToString">
            <summary>
            Returns the <see cref="P:Syn.Bot.Oscova.Entities.MathExpressionEntity.Value"/> part of this entity.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Entities.PatternEntity">
            <summary>
            Represents an Entity that is generated after a custom regular expression match.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Entities.PatternEntity.#ctor(System.String,System.Text.RegularExpressions.Match)">
            <summary>
            Creates a new instance of <see cref="T:Syn.Bot.Oscova.Entities.PatternEntity"/> class.
            </summary>
            <param name="entityType">Entity name</param>
            <param name="match">Regular expression match instance.</param>
        </member>
        <member name="T:Syn.Bot.Oscova.Entities.TextEntity">
            <summary>
            Represents a textual entity that is extracted by <see cref="F:Syn.Bot.Oscova.Sys.Text"/> recognizer.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.EvaluationResult">
            <summary>
            Represents an evaluation result generated by <see cref="T:Syn.Bot.Oscova.OscovaBot"/>.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.EvaluationResult.Stats">
            <summary>
            Gets the evaluation statistics.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.EvaluationResult.Intents">
            <summary>
            Gets the intents.
            </summary>
            <value>
            The intents.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.EvaluationResult.Entities">
            <summary>
            Gets the entities.
            </summary>
            <value>
            The entities.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.EvaluationResult.SuggestedIntent">
            <summary>
            Gets the suggested Intent.
            </summary>
            <remarks>In most cases, a suggested intent is the highest scoring intent.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.EvaluationResult.Invoke(Syn.Bot.Oscova.IntentResult)">
            <summary>
            Invokes the the specified <see cref="T:Syn.Bot.Oscova.IntentResult"/>.
            </summary>
            <param name="intentResult">The result.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.EvaluationResult.Invoke">
            <summary>
            Invokes the suggested intent.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.EvaluationResult.Serialize">
            <summary>
            Serializes this evaluation result to JSON.
            </summary>
            <returns>A JSON representation of this evaluation result.</returns>
        </member>
        <member name="P:Syn.Bot.Oscova.Events.CompositeEntityCreatedEventArgs.Request">
            <summary>
            Gets the Request.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Events.NormalizedEventArgs.Text">
            <summary>
            Gets the initial value of text that was normalized.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Events.NormalizedEventArgs.NormalizedText">
            <summary>
            Gets or sets the normalized text.
            </summary>
            <value>
            The normalized text.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.Events.NormalizingEventArgs">
            <summary>
            Represents an events args for <see cref="E:Syn.Bot.Oscova.Interfaces.INormalizer.Normalizing"/> event.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Syn.Bot.Oscova.Events.NormalizingEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Events.NormalizingEventArgs"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Events.NormalizingEventArgs.Text">
            <summary>
            Gets or sets text that is going to be normalized.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.Events.TrainingFinishedEventArgs.SaveModel(System.String)">
            <summary>
            Creates and save a language model to the specified file path.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="P:Syn.Bot.Oscova.Events.UserAddedEventArgs.User">
            <summary>
            Gets the User.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Events.UserCreatedEventArgs.User">
            <summary>
            Gets the User.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Events.UserRemovedEventArgs.User">
            <summary>
            Gets the User.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Extensions.EntityExtensions.ValueAs``1(Syn.Bot.Oscova.Interfaces.IEntity)">
            <summary>
            Gets the reference value as provided struct type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Syn.Bot.Oscova.Extensions.EntityExtensions.IsSystem(Syn.Bot.Oscova.Interfaces.IEntity)">
            <summary>
            Determines whether this entity is pre-built system type.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
              <c>true</c> if the specified entity is pre-built system type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Extensions.EntityExtensions.IsDeveloper(Syn.Bot.Oscova.Interfaces.IEntity)">
            <summary>
            Determines whether this entity is a developer entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
              <c>true</c> if the specified entity is a developer entity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Extensions.EntityExtensions.IsSystemTemp(Syn.Bot.Oscova.Interfaces.IEntity)">
            <summary>
            Determines whether this entity is a temporary pre-built system entity type.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
              <c>true</c> if the specified entity is a temporary pre-built system entity-type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Extensions.EntityExtensions.EndIndex(Syn.Bot.Oscova.Interfaces.IEntity)">
            <summary>
            Gets the ending index of the provided entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Oscova.Extensions.VectorVocabularyExtensions">
            <summary>
            Oscova specific extensions for <see cref="T:Syn.Oryzer.LanguageProcessing.VectorVocabulary"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Extensions.VectorVocabularyExtensions.Optimize(Syn.Oryzer.LanguageProcessing.VectorVocabulary,Syn.Bot.Oscova.OscovaBot)">
            <summary>
            Get an optimized and Bot vocabulary specific Word Vector vocabulary.
            </summary>
            <param name="vocabulary">The <see cref="T:Syn.Oryzer.LanguageProcessing.VectorVocabulary"/> to optimize.</param>
            <param name="bot">The Oscova Bot instance.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Extensions.VectorVocabularyExtensions.Optimize(Syn.Oryzer.LanguageProcessing.VectorVocabulary,Syn.Bot.Oscova.OscovaBot,System.Int32)">
            <summary>
            Get an optimized and Bot vocabulary specific Word Vector vocabulary of the specified relative range.
            </summary>
            <param name="vocabulary">The <see cref="T:Syn.Oryzer.LanguageProcessing.VectorVocabulary"/> to optimize.</param>
            <param name="bot">The Oscova Bot instance.</param>
            <param name="range">Maximum relative count.</param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Oscova.FileFormat">
            <summary>
            File format options
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.FileFormat.Binary">
            <summary>
            Binary Data Format
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.FileFormat.Text">
            <summary>
            Textual Data Format
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.IntentController.Disable(System.String)">
            <summary>
            Permanently disables the specified intent for the user.
            </summary>
            <param name="intentName">Intent name.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.IntentController.Enable(System.String)">
            <summary>
            Enables a previously disabled intent.
            </summary>
            <param name="intentName">Intent name.</param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Oscova.IntentResult">
            <summary>
            Represents the returned value of intent evaluation.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.IntentResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.IntentResult"/> class.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.IntentResult.CallCount">
            <summary>
            Gets the total intent call count.
            </summary>
            <value>
            The call count.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.IntentResult.ExpressionName">
            <summary>
            Gets the explicitly specified name of the expression.
            </summary>
            <returns>Name of the expression or <c>null</c> if the expression has now explicitly specified name.</returns>
        </member>
        <member name="P:Syn.Bot.Oscova.IntentResult.Name">
            <summary>
            Gets the intent name.
            </summary>
            <value>
            The intent name.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.IntentResult.PromptMessage">
            <summary>
            Gets the prompt message.
            </summary>
            <value>
            The prompt message.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.IntentResult.Score">
            <summary>
            Gets the calibrated intent result score.
            </summary>
            <value>
            The score.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.IntentResult.Interpretation">
            <summary>
            Gets the interpreted value.
            </summary>
            <value>
            The interpreted value.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.IntentResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="F:Syn.Bot.Oscova.IntentResult.Empty">
            <summary>
            Represents an empty <see cref="T:Syn.Bot.Oscova.IntentResult"/>. This field is read-only.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Interfaces.IBakableRecognizer">
            <summary>
            Interface implemented by entity recognizers that contain bakable entries.
            </summary>
            <seealso cref="T:Syn.Bot.Oscova.Interfaces.IEntityRecognizer" />
        </member>
        <member name="P:Syn.Bot.Oscova.Interfaces.IBakableRecognizer.IsBaked">
            <summary>
            Gets or sets a value indicating whether the entries are baked.
            </summary>
            <value>
              <c>true</c> if entries are baked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.Interfaces.IBakableRecognizer.Bake">
            <summary>
            Bakes the entries of this recognizer.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Interfaces.IEntity">
            <summary>
            Core Entity interface implemented by all OSCOVA entities.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Interfaces.IEntity.Type">
            <summary>
            Gets or sets the entity type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Interfaces.IEntity.Value">
            <summary>
            Gets the matched value in user input.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Interfaces.IEntity.Index">
            <summary>
            Gets the starting index of the matched value in user input.
            </summary>
            <value>
            The index.
            </value>
            <remarks>Default value is <c>-1</c> which denotes that an index is not set.</remarks>
        </member>
        <member name="T:Syn.Bot.Oscova.Interfaces.IEntityRecognizer">
            <summary>
            Interface for Oscova Named Entity Recognizers.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Interfaces.IEntityRecognizer.EntityType">
            <summary>
            Gets the <see cref="T:Syn.Bot.Oscova.Interfaces.IEntity"/> type parsed by this recognizer.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.Interfaces.IEntityRecognizer.Parse(Syn.Bot.Oscova.Request)">
            <summary>
            Parses the specified request and returns a collection of recognized entities.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="E:Syn.Bot.Oscova.Interfaces.INormalizer.Normalizing">
            <summary>
            Occurs when normalization starts.
            </summary>
        </member>
        <member name="E:Syn.Bot.Oscova.Interfaces.INormalizer.Normalized">
            <summary>
            Occurs when normalization is completed.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Interfaces.INumberUnitEntity.Amount">
            <summary>
            Gets the amount.
            </summary>
            <value>
            The amount.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Interfaces.INumberUnitEntity.Unit">
            <summary>
            Gets the unit.
            </summary>
            <value>
            The unit.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.Interfaces.ISimlAdapter">
            <summary>
            SIML Adapter Interface for Modern SIML.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Interfaces.ISimlAdapter.Evaluate(Syn.Bot.Oscova.AdapterNode)">
            <summary>
            Evaluates the given <see cref="T:Syn.Bot.Oscova.AdapterNode"/>.
            </summary>
            <param name="adapterNode"></param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Oscova.Internal.ExpressionToken.HasPrompt">
            <summary>
            Gets or sets a value indicating whether this token type has a prompt specified.
            </summary>
            <value>
            <c>true</c> if this token has prompt; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Internal.ExpressionToken.Format">
            <summary>
            Gets the normalized value after removing strip symbols.
            </summary>
            <value>
            The normalized value.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Internal.ExpressionToken.Value">
            <summary>
            Gets the value without symbols being stripped.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Internal.ExpressionToken.Type">
            <summary>
            Gets the type of expression token.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="F:Syn.Bot.Oscova.Internal.IntentType.UserDeclared">
            <summary>
            Denotes an Intent that is explicitly defined within a <see cref="T:Syn.Bot.Oscova.Dialog"/> class.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Internal.IntentType.Prompt">
            <summary>
            Denotes a Prompt Intent.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Internal.IntentType.Dynamic">
            <summary>
            Denotes a quick intent that is generated from <see cref="P:Syn.Bot.Oscova.Dialog.QuickIntents"/>.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Internal.IntentType.DefaultFallback">
            <summary>
            Denotes the global fallback intent.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Internal.IntentType.ContextualFallback">
            <summary>
            Denotes a contextual fallback intent.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Language">
            <summary>
            Represents the Human Language Model used for Natural Language Processing by <see cref="T:Syn.Bot.Oscova.OscovaBot"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Language.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Language"/> class.
            </summary>
            <param name="cultureInfo">The culture information.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.WordVectors">
            <summary>
            Gets the WordVectors.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.Vocabulary">
            <summary>
            Gets the bot vocabulary.
            </summary>
            <remarks>Words from expressions gets added to this vocabulary.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.WordNet">
            <summary>
            Gets the WordNet engine.
            </summary>
            <value>
            The WordNet engine.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.Culture">
            <summary>
            Gets the culture.
            </summary>
            <value>
            The culture.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.Punctuations">
            <summary>
            Gets or sets the punctuations.
            </summary>
            <value>
            The punctuations.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>
            The filters.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.Normalizer">
            <summary>
            Gets or sets the normalizer.
            </summary>
            <value>
            The normalizer.
            </value>
            <remarks>A <see cref="T:Syn.Bot.Oscova.Interfaces.INormalizer"/> applies added filters and pre-processes user requests and example expressions.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.Tokenizer">
            <summary>
            Gets or sets the tokenizer.
            </summary>
            <value>
            The tokenizer.
            </value>
            <remarks>External implementations must consider curly braces as single tokens.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.Detokenizer">
            <summary>
            Gets or sets the detokenizer.
            </summary>
            <value>
            The detokenizer.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.Stemmer">
            <summary>
            Gets or sets the stemmer.
            </summary>
            <value>
            The stemmer.
            </value>
            <remarks>When external Lexical Database is connected. Oscova treats the stemmer as a lemmatizer.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Language.StopWords">
            <summary>
            Gets or sets the stop words.
            </summary>
            <value>
            The stop words.
            </value>
            <remarks>Stop words are commonly used words which are filtered out or ignored during text processing.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.Languages.English.EnglishLanguage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Languages.English.EnglishLanguage"/> class.
            </summary>
        </member>
        <member name="E:Syn.Bot.Oscova.Languages.English.EnglishNormalizer.Normalizing">
            <summary>
            Occurs when normalization starts.
            </summary>
        </member>
        <member name="E:Syn.Bot.Oscova.Languages.English.EnglishNormalizer.Normalized">
            <summary>
            Occurs when normalization is completed.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Languages.English.EnglishTokenizer">
            <summary>
            Represents default English Tokenizer.
            </summary>
            <seealso cref="T:Syn.Bot.Oscova.Interfaces.ITokenizer" />
        </member>
        <member name="M:Syn.Bot.Oscova.Languages.English.EnglishTokenizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Languages.English.EnglishTokenizer"/> class.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Languages.English.EnglishTokenizer.Tokenize(System.String)">
            <summary>
            Tokenizes the specified text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Messages.AudioMessage.Url">
            <summary>
            Gets or sets the audio URL path.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Messages.ImageMessage.Url">
            <summary>
            Gets or sets the image URL path.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Messages.QuickReplyMessage.Title">
            <summary>
            Gets or sets the quick replies title.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Messages.QuickReplyMessage.Replies">
            <summary>
            Gets or sets the list of quick reply items.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Messages.TextMessage.Texts">
            <summary>
            Gets or sets the list of text message items.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Messages.TextMessage.GetRandomText">
            <summary>
            Gets a random text value from <see cref="P:Syn.Bot.Oscova.Messages.TextMessage.Texts"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Oscova.Messages.VideoMessage.Url">
            <summary>
            Gets or sets the video URL path.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.OscovaBot">
            <summary>
            Represents an Oscova Bot system.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.Activate(System.String,System.String,System.String)">
            <summary>
            Activates the specified license type.
            </summary>
            <param name="licenseType">Type of the license.</param>
            <param name="licensee">The licensee.</param>
            <param name="licenseKey">The license key.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.Activate(System.String)">
            <summary>
            Activates the framework with the license key.
            </summary>
            <param name="licenseKey">The license key.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.LicenseType">
            <summary>
            Gets a string representation of the license type.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Logger">
            <summary>
            Gets the global OSCOVA bot logger.
            </summary>
            <value>
            The logger.
            </value>
            <remarks>All components that interact with <see cref="T:Syn.Bot.Oscova.OscovaBot"/> use this instance for logging.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Version">
            <summary>
            Gets the version of the Bot Library.
            </summary>
            <value>
            The Bot Library version.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Instance">
            <summary>
            Gets the static <see cref="T:Syn.Bot.Oscova.OscovaBot"/> instance.
            </summary>
            <value>
            The main bot.
            </value>
            <remarks>A new <see cref="T:Syn.Bot.Oscova.OscovaBot"/> object is initialized only on 'Get' call.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.ID">
            <summary>
            Gets the bot identifier.
            </summary>
            <value>
            The bot identifier.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.OscovaBot"/> class.
            </summary>
            <remarks>Uses default Bot configuration.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.#ctor(Syn.Bot.Oscova.BotConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.OscovaBot"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.ScoreEngine">
            <summary>
            Gets or sets the <see cref="T:Syn.Bot.Oscova.Interfaces.IScoreEngine"/> engine for computing expression and user request similarities.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.IsTrained">
            <summary>
            Gets a value indicating if the trainer had completed bot training.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Actions">
            <summary>
            Gets a collection of stored intent actions.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Events">
            <summary>
            Gets a collection of stored intent events.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.LastInteractionTime">
            <summary>
            Gets the last time a <see cref="T:Syn.Bot.Oscova.BotUser"/> interacted with the Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.SimlInterpreter">
            <summary>
            Gets the SIML Modern interpreter.
            </summary>
            <value>
            The SIML Modern interpreter.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.ScriptEngines">
            <summary>
            Gets the script engine collection.
            </summary>
            <value>
            The script engine collection.
            </value>
            <remarks>This collection is automatically instantiated with a JavaScript engine.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Timer">
            <summary>
            Gets the service timer of the Bot. This timer is used to provide timed responses.
            </summary>
            <remarks>The default interval is <code>1000</code> milliseconds.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Configuration">
            <summary>
            Gets the bot configuration.
            </summary>
            <value>
            The bot configuration.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Settings">
            <summary>
            Gets a list of stored variables.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Cryptographer">
            <summary>
            Gets or sets the <see cref="T:Syn.Bot.Oscova.Interfaces.ICryptographer"/> implementation.
            </summary>
            <remarks>The implementation is used to decrypt request text when <see cref="P:Syn.Bot.Oscova.BotConfiguration.EndToEndEncryption"/> is enabled.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.DefaultUserSettings">
            <summary>
            Gets the default user settings.
            </summary>
            <value>
            The default user settings.
            </value>
            <remarks>
            This <see cref="T:Syn.Bot.Common.UserSettings"/> contains the default variables that are loaded upon package load. 
            Once loaded any changes to this settings will not affect other <see cref="T:Syn.Bot.Oscova.BotUser"/> settings.
            </remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.DateTime">
            <summary>
            Gets the DateTime value used by this bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Language">
            <summary>
            Gets or sets the language.
            </summary>
            <value>
            The Language.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Dialogs">
            <summary>
            Gets the dialogs.
            </summary>
            <value>
            The dialogs.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Recognizers">
            <summary>
            Gets the recognizers.
            </summary>
            <value>
            The recognizers.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Users">
            <summary>
            Gets the users collection.
            </summary>
            <value>
            The users collection.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.MainUser">
            <summary>
            Gets the main bot user.
            </summary>
            <value>
            The main user.
            </value>
            <remarks>When no user detail is provided. A <see cref="T:Syn.Bot.Oscova.Request"/> is processed under this user's context.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Trainer">
            <summary>
            Gets the bot trainer.
            </summary>
            <value>
            The trainer.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.OscovaBot.Stats">
            <summary>
            Gets the bot statistics.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.Import(System.Xml.Linq.XDocument)">
            <summary>
            Import the provided SIML Modern document into the SIML Interpreter.
            </summary>
            <param name="simlDocument">SIML Modern Document</param>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.Import(System.Collections.Generic.IEnumerable{System.Xml.Linq.XDocument})">
            <summary>
            Imports the provided collection of SIML Modern documents.
            </summary>
            <param name="simlDocuments"></param>
            <remarks>Also performs SIML document sequencing.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.ImportFromDirectory(System.String)">
            <summary>
            Searches the specified directory and its sub-directories for SIML files and sequentially loads them.
            </summary>
            <param name="directoryPath">Path to directory containing SIML files.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.ImportEntitiesFromFile(System.String,Syn.Bot.Oscova.EntityDataFormat)">
            <summary>
            Imports entities and their values and also synonyms from the file specified.
            </summary>
            <param name="fileName">File name containing entities</param>
            <param name="dataFormat">Format of the specified file</param>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.ImportEntitiesFromText(System.String,Syn.Bot.Oscova.EntityDataFormat)">
            <summary>
            Imports entities and their values and also synonyms from specified text.
            </summary>
            <param name="text">Text string</param>
            <param name="dataFormat">Format of the specified textual data</param>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateUser(System.String)">
            <summary>
            Creates a new <see cref="T:Syn.Bot.Oscova.BotUser"/> with the specified id.
            </summary>
            <param name="userId">The user identifier.</param>
            <remarks>
            If a user with the specified ID already exists then the method returns the existing user.
            </remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateUser">
            <summary>
            Creates a new <see cref="T:Syn.Bot.Oscova.BotUser"/> with a unique id.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateMainUser(System.String)">
            <summary>
            Gets a new <see cref="T:Syn.Bot.Oscova.BotUser"/> image of <see cref="P:Syn.Bot.Oscova.OscovaBot.MainUser"/>.
            </summary>
            <param name="userId">Unique user id for this <see cref="T:Syn.Bot.Oscova.BotUser"/>.</param>
            <returns>
            Returns a new <see cref="T:Syn.Bot.Oscova.BotUser"/> that has the same domains and settings as the <see cref="P:Syn.Bot.Oscova.OscovaBot.MainUser"/>.
            This method must only be used by different channels. This method does not replace <see cref="P:Syn.Bot.Oscova.OscovaBot.MainUser"/> instance.
            </returns>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateCompositeType(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Creates a composite entity type.
            </summary>
            <param name="compositeTypeName">Name of the type.</param>
            <param name="childrenTypes">The children entity types.</param>
            <param name="wordDistance">The maximum word distance between provided entity types.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateRecognizer(System.String,Syn.Bot.Oscova.Delegates.EntityExtractor)">
            <summary>
            Creates a <see cref="T:Syn.Bot.Oscova.Recognizers.FunctionalRecognizer"/>.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="extractor">The extractor method.</param>
            <returns><see cref="T:Syn.Bot.Oscova.Recognizers.FunctionalRecognizer"/></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateRecognizer(System.String,System.StringComparer)">
            <summary>
            Creates an entity recognizer.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="comparer">The string comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateRecognizer(System.String)">
            <summary>
            Creates a basic case-insensitive entry based <see cref="T:Syn.Bot.Oscova.Recognizers.EntityRecognizer"/>.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <remarks>Developer must fill in the <see cref="P:Syn.Bot.Oscova.Recognizers.EntryRecognizer.Entries"/> values manually.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateRecognizer(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparer)">
            <summary>
            Creates an entity recognizer.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="valueList">The value list.</param>
            <param name="comparer">The string comparer.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateRecognizer(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a case-insensitive <see cref="T:Syn.Bot.Oscova.Recognizers.EntityRecognizer"/> for list of terms.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="valueList">The term list.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateRecognizer(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a <see cref="T:Syn.Bot.Oscova.Recognizers.RegexRecognizer"/> recognizer.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="regex">The regex.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateRecognizer``1(System.String,System.StringComparer)">
            <summary>
            Creates an entity recognizer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityType">Type of the entity.</param>
            <param name="comparer">The string comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.CreateRecognizer``1(System.String)">
            <summary>
            Creates a case-insensitive <see cref="T:Syn.Bot.Oscova.Recognizers.EntityRecognizer"/> for enum values.
            </summary>
            <typeparam name="T">Enum Type.</typeparam>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">Raised if given type is not enum.</exception>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.Evaluate(System.String)">
            <summary>
            Evaluates the specified message as a <see cref="P:Syn.Bot.Oscova.OscovaBot.MainUser"/> request.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Raised if this method is called before the bot is trained.</exception>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.Raise(System.String)">
            <summary>
            Raises the specified message as a <see cref="P:Syn.Bot.Oscova.OscovaBot.MainUser"/> event request.
            </summary>
            <param name="eventName">The event name.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.Raise(System.String,Syn.Bot.Oscova.BotUser)">
            <summary>
            Triggers an event with the specified event name.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="user">User calling the event.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.Raise(Syn.Bot.Oscova.Request)">
            <summary>
            Triggers an event with the specified request text.
            </summary>
            <param name="request">Request containing the event name.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.OscovaBot.Evaluate(Syn.Bot.Oscova.Request)">
            <summary>
            Evaluates the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Raised if this method is called before the bot is trained.</exception>
        </member>
        <member name="E:Syn.Bot.Oscova.OscovaBot.InvokingIntent">
            <summary>
            Occurs when an <see cref="T:Syn.Bot.Oscova.IntentResult"/> is invoked.
            </summary>
        </member>
        <member name="E:Syn.Bot.Oscova.OscovaBot.TrainingStarted">
            <summary>
            Occurs when bot training is started.
            </summary>
        </member>
        <member name="E:Syn.Bot.Oscova.OscovaBot.TrainingFinished">
            <summary>
            Occurs when bot training has completed.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Recognizers.BaseRegexRecognizer.EntityType">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Recognizers.BaseRegexRecognizer.CreateEntity(System.Text.RegularExpressions.Match)">
            <summary>
            Called when a recognizer is supposed to create a specific entity. Specify <c>null</c> if an entity is not supposed to be added.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Oscova.Recognizers.EntityRecognizer.#ctor(System.String)">
            <summary>
            Initializes a new instance of case-insensitive <see cref="T:Syn.Bot.Oscova.Recognizers.EntityRecognizer"/> class.
            </summary>
            <param name="type">The entity type.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Recognizers.EntityRecognizer.#ctor(System.String,System.StringComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Recognizers.EntityRecognizer"/> class.
            </summary>
            <param name="type">The entity type parsed by the recognizer.</param>
            <param name="comparer"></param>
        </member>
        <member name="T:Syn.Bot.Oscova.Recognizers.EntryRecognizer">
            <summary>
            Abstract Entries Recognizer.
            </summary>
            <seealso cref="T:Syn.Bot.Oscova.Interfaces.IBakableRecognizer" />
        </member>
        <member name="M:Syn.Bot.Oscova.Recognizers.EntryRecognizer.#ctor(System.String,System.StringComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Recognizers.EntryRecognizer"/> class.
            </summary>
            <param name="type">The entity type parsed by the recognizer.</param>
            <param name="comparer">The <see cref="T:System.StringComparer"/> to use.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Recognizers.EntryRecognizer.EntityType">
            <summary>
            Gets the <see cref="P:Syn.Bot.Oscova.Interfaces.IEntity.Type"/> parsed by this parser.
            </summary>
            <value>
            The <see cref="P:Syn.Bot.Oscova.Interfaces.IEntity.Type"/>.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Recognizers.EntryRecognizer.Entries">
            <summary>
            Gets or sets the entries.
            </summary>
            <value>
            The entries.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Recognizers.EntryRecognizer.EntriesRegex">
            <summary>
            Gets or sets the entries regex.
            </summary>
            <value>
            The entries regex.
            </value>
            <remarks>The value of this is initialized after the <see cref="M:Syn.Bot.Oscova.Recognizers.EntryRecognizer.Bake"/> method is called.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.Recognizers.EntryRecognizer.CreateEntity(Syn.Bot.Oscova.MatchItem)">
            <summary>
            Creates the entity.
            </summary>
            <param name="match">The match.</param>
            <remarks>
            This method is called after every successful match. 
            May also return <c>null</c> to avoid adding to returned <see cref="T:Syn.Bot.Oscova.Collections.EntityCollection"/>.
            </remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Recognizers.EntryRecognizer.IsBaked">
            <summary>
            Gets or sets a value indicating whether the entries are baked.
            </summary>
            <value>
              <c>true</c> if entries are baked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Recognizers.EntryRecognizer.AutoExpand">
            <summary>
            Gets or sets a value indicating if entries should be expanded.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Recognizers.EntryRecognizer.Parse(Syn.Bot.Oscova.Request)">
            <summary>
            Parses the specified request and returns a collection of recognized entities.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Recognizers.EntryRecognizer.Bake">
            <summary>
            Bakes <see cref="P:Syn.Bot.Oscova.Recognizers.EntryRecognizer.Entries"/> and creates required regular expression.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Recognizers.MultiEntryRecognizer.CreateEntity(Syn.Bot.Oscova.MatchItem)">
            <summary>
            Creates the entity.
            </summary>
            <param name="match">The match.</param>
            <remarks>
            This method is called after every successful match. 
            May also return <c>null</c> to avoid adding to returned <see cref="T:Syn.Bot.Oscova.Collections.EntityCollection"/>.
            </remarks>
        </member>
        <member name="T:Syn.Bot.Oscova.Recognizers.RegexRecognizer">
            <summary>
            Represents a Regular Expression based entity recognizer.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Recognizers.RegexRecognizer.#ctor(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Initializes a new instance of <see cref="T:Syn.Bot.Oscova.Recognizers.RegexRecognizer"/> class.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="regex">The <see cref="P:Syn.Bot.Oscova.Recognizers.RegexRecognizer.Regex"/> instance.</param>
        </member>
        <member name="P:Syn.Bot.Oscova.Recognizers.RegexRecognizer.Regex">
            <summary>
            Gets the Regex.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Recognizers.RegexRecognizer.CreateEntity(System.Text.RegularExpressions.Match)">
            <summary>
            Returns an <see cref="T:Syn.Bot.Oscova.Entities.Entity"/> 
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Oscova.Request">
            <summary>
            Represents a user query.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Request.User">
            <summary>
            Gets the user.
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Request.Bot">
            <summary>
            Gets the bot.
            </summary>
            <value>
            The bot.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Request.Text">
            <summary>
            Gets or sets the original user request text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Request.NormalizedText">
            <summary>
            Gets the normalized text.
            </summary>
            <value>
            The normalized text.
            </value>
        </member>
        <member name="T:Syn.Bot.Oscova.Response">
            <summary>
            Represents a Bot response.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Response.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Oscova.Response"/> class.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Response.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Response.Messages">
            <summary>
            Gets the messages attached to this response.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Response.Type">
            <summary>
            Gets or sets the response type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Response.Format">
            <summary>
            Gets or sets the response format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Response.Priority">
            <summary>
            Gets or sets the response priority.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Response.Hint">
            <summary>
            Gets or sets the response hint.
            </summary>
            <value>
            The hint.
            </value>
            <remarks>A hint is the next user input sequence expected by the bot.</remarks>
        </member>
        <member name="M:Syn.Bot.Oscova.Response.Serialize">
            <summary>
            Serializes this response into JSON.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Response.Empty">
            <summary>
            Returns an Empty Response. This field is read-only.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Result">
            <summary>
            Represents a result generated by <see cref="T:Syn.Bot.Oscova.OscovaBot"/> after evaluation of a <see cref="P:Syn.Bot.Oscova.Result.Request"/>.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.Result.Request">
            <summary>
            Gets the request that generated this result.
            </summary>
            <value>
            The user request.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Result.Bot">
            <summary>
            Gets the bot.
            </summary>
            <value>
            The bot.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Result.User">
            <summary>
            Gets the user.
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Result.SessionId">
            <summary>
            Gets the current user session identifier.
            </summary>
            <value>
            The user session identifier.
            </value>
        </member>
        <member name="P:Syn.Bot.Oscova.Result.Intents">
            <summary>
            Gets the intents.
            </summary>
            <value>
            The intents.
            </value>
            <remarks>Intents are ordered based on <see cref="P:Syn.Bot.Oscova.IntentResult.Score"/>.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Result.Entities">
            <summary>
            Gets the entities.
            </summary>
            <value>
            The entities.
            </value>
            <remarks>Entities are ordered based on <see cref="P:Syn.Bot.Oscova.Interfaces.IEntity.Index"/>.</remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.Result.CurrentIntent">
            <summary>
            Gets the current intent which has been invoked.
            </summary>
            <value>
            The currently invoked intent.
            </value>
        </member>
        <member name="M:Syn.Bot.Oscova.Result.SendResponse(System.String)">
            <summary>
            Sends the specified message to the user.
            </summary>
            <param name="message">The bot message.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Result.SendResponse(System.String,System.TimeSpan)">
            <summary>
            Sends the specified message to the user after the delay interval.
            </summary>
            <param name="message">The message.</param>
            <param name="delay">The delay interval.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Result.SendResponse(Syn.Bot.Oscova.Response)">
            <summary>
            Sends the specified response to the user.
            </summary>
            <param name="response">The bot response.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Result.SendResponse(Syn.Bot.Oscova.Response,System.TimeSpan)">
            <summary>
            Sends the response after the specified interval.
            </summary>
            <param name="response">The response.</param>
            <param name="timeSpan">The time span.</param>
        </member>
        <member name="T:Syn.Bot.Oscova.ResultCalibrator">
            <summary>
            Default implementation of <see cref="T:Syn.Bot.Oscova.Interfaces.IResultCalibrator"/>
            </summary>
            <remarks>Assigns priority to intents based on entities and contexts matched. Finally orders intents based on their scores.</remarks>
        </member>
        <member name="T:Syn.Bot.Oscova.ScoreConfiguration">
            <summary>
            Holds scoring values.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.ScoreConfiguration.MinimumScore">
            <summary>
            Gets or sets the absolute minimum intent score.
            </summary>
            <value>
            The minimum intent score.
            </value>
            <remarks>Default is <c>0.05</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.ScoreConfiguration.PromptMissingEntityScore">
            <summary>
            Gets or sets the score of an entity that is missing but has prompt.
            </summary>
            <value>
            The prompt missing entity score.
            </value>
            <remarks>Default is <c>0.5</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.ScoreConfiguration.MaxIntentScore">
            <summary>
            Gets or sets the maximum intent score in case the classifier is over confident.
            </summary>
            <remarks>Default is <c>0.99</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.ScoreConfiguration.PromptModeMissingWord">
            <summary>
            Gets or sets Score of a missing word in expression when classifier is in Prompt mode.
            </summary>
            <value>
            The missing expression word score.
            </value>
            <remarks>Default is <c>0.5</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.ScoreConfiguration.RuleScoreDependency">
            <summary>
            Gets or sets the rule score dependency percentage.
            </summary>
            <value>
            The rule score dependency percentage.
            </value>
            <remarks>Default is <c>0.6</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.ScoreConfiguration.IsolatedTextEntityConfidence">
            <summary>
            Gets or sets the isolated text entity confidence for <see cref="F:Syn.Bot.Oscova.Sys.Text"/>
            </summary>
            <value>
            The isolated text entity confidence.
            </value>
            <remarks>Default value is <c>0.8</c></remarks>
        </member>
        <member name="P:Syn.Bot.Oscova.ScoreConfiguration.ResultCalibrator">
            <summary>
            Gets or sets the <see cref="T:Syn.Bot.Oscova.Interfaces.IResultCalibrator"/> that calibrates the order of intents in <see cref="T:Syn.Bot.Oscova.Collections.IntentCollection"/>.
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Security.Cryptographer">
            <summary>
            Default implementation of <see cref="T:Syn.Bot.Oscova.Interfaces.ICryptographer"/>.
            <remarks>Developers must implement a custom version of <see cref="T:Syn.Bot.Oscova.Interfaces.ICryptographer"/>.</remarks>
            </summary>
        </member>
        <member name="T:Syn.Bot.Oscova.Sys">
            <summary>
            Provides a list of all known System Entity type names.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.MathExpression">
            <summary>
            Computable math expressions.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Text">
            <summary>
            Any non-empty text.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Url">
            <summary>
            A valid URL.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Country">
            <summary>
            Names of country.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Positive">
            <summary>
            Positive or affirmative user response.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Negative">
            <summary>
            Negative user response
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Color">
            <summary>
            Names of color.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Number">
            <summary>
            Integer or decimal numbers.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Ordinal">
            <summary>
            Ordinals
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Integer">
            <summary>
            Integer numbers.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Language">
            <summary>
            Names of languages.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Email">
            <summary>
            Valid email address.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.MusicGenre">
            <summary>
            Genre of Music.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitInformation">
            <summary>
            Digital Information size with unit.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitInformationName">
            <summary>
            Unit of Digital Information.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitLengthName">
            <summary>
            Units of length.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitWeightName">
            <summary>
            Units of weight.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitSpeedName">
            <summary>
            Units of speed.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitVolumeName">
            <summary>
            Units of volume.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitTemperatureName">
            <summary>
            Units of temperature.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitAreaName">
            <summary>
            Units of area.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Temperature">
            <summary>
            Temperature with unit.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitArea">
            <summary>
            Area with unit.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitSpeed">
            <summary>
            Speed with unit.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitLength">
            <summary>
            Length with unit.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitVolume">
            <summary>
            Volume with unit.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UnitWeight">
            <summary>
            Weight with unit.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.IpAddress">
            <summary>
            IP Address sequence.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Age">
            <summary>
            Person's age.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UsPostalCode">
            <summary>
            US postal code.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UkPostalCode">
            <summary>
            UK postal code.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.IndianPostalCode">
            <summary>
            Indian postal code.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Percentage">
            <summary>
            Number and percents
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.StatesUs">
            <summary>
            US states
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.StatesIndia">
            <summary>
            Indian states.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.NumberSequence">
            <summary>
            Number sequence.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Currency">
            <summary>
            Number and currency unit.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.CurrencyName">
            <summary>
            Names of currencies.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Cardinal">
            <summary>
            Cardinal.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.IndianPhoneNumber">
            <summary>
            Indian phone number formats.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.UsPhoneNumber">
            <summary>
            US phone number formats.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Time">
            <summary>
            Time.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Month">
            <summary>
            Name of months.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Day">
            <summary>
            Names of day of week.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Date">
            <summary>
            Date.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.DateTime">
            <summary>
            Date and time.
            </summary>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.User">
             <summary>
             Current user settings.
             </summary>
            <example><c>@sys.user.name</c> specifies the name variable of the current user.</example>
             <remarks>Used to specify an existing user variable in an expression. </remarks>
        </member>
        <member name="F:Syn.Bot.Oscova.Sys.Bot">
             <summary>
             Current bot settings.
             </summary>
            <example><c>@sys.bot.name</c> specifies the name variable of the bot.</example>
             <remarks>Used to specify an existing bot variable in an expression. </remarks>
        </member>
        <member name="T:Syn.Bot.Oscova.Trainer">
            <summary>
            Represents an Oscova bot training system.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Trainer.StartTraining">
            <summary>
            Starts training the Bot.
            </summary>
        </member>
        <member name="M:Syn.Bot.Oscova.Trainer.StartTraining(System.IO.Stream)">
            <summary>
            Starts training the Bot using the model provided.
            </summary>
            <param name="modelStream"></param>
        </member>
        <member name="M:Syn.Bot.Oscova.Trainer.StartTraining(System.String)">
            <summary>
            Starts training the Bot using the model provided.
            </summary>
            <param name="modelFilePath">Model file path.</param>
        </member>
        <member name="M:Syn.Bot.Oscova.Utilities.DateTimeUtility.GetTimeString(System.DateTime)">
            <summary>
            Gets the time string in ISO-8601 format.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Oscova.WorkspaceNodes.ExpressionNode.Value">
            <summary>
            Gets or sets the expression value.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.WorkspaceNodes.ExpressionNode.ExpressionName">
            <summary>
            Gets or sets the expression name.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.WorkspaceNodes.PromptNode.EntityType">
            <summary>
            Gets or sets the prompt missing entity type.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.WorkspaceNodes.PromptNode.Message">
            <summary>
            Gets or sets the message to display when the specified entity is missing.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.WorkspaceNodes.PromptNode.ContextName">
            <summary>
            Specifies a prompt context name under which the prompt should activate.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.WorkspaceNodes.TraitNode.Type">
            <summary>
            Gets or sets the trait type.
            </summary>
        </member>
        <member name="P:Syn.Bot.Oscova.WorkspaceNodes.TraitNode.Fields">
            <summary>
            Gets or sets the fields.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.BotConfiguration">
            <summary>
            A pre-load configuration class for <see cref="T:Syn.Bot.Siml.SimlBot"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.BotConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.BotConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.BotId">
            <summary>
            Gets or sets the unique ID for the Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.MainUserId">
            <summary>
            Gets or sets the main user identifier.
            </summary>
            <value>
            The main user identifier.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.CacheManager">
            <summary>
            Gets or sets the cache manager.
            </summary>
            <value>
            Any valid implementation of ICacheManager.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowRegex">
            <summary>
            Gets or sets a value indicating whether regular expressions are allowed.
            </summary>
            <value>
              <c>true</c> if regular expressions are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowSets">
            <summary>
            Gets or sets a value indicating whether Sets are allowed.
            </summary>
            <value>
              <c>true</c> if sets are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowMaps">
            <summary>
            Gets or sets a value indicating whether Maps are allowed.
            </summary>
            <value>
              <c>true</c> if Maps are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowFilters">
            <summary>
            Gets or sets a value indicating whether filters are allowed.
            </summary>
            <value>
              <c>true</c> if filters are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowJavaScript">
            <summary>
            Gets or sets a value indicating whether JavaScript is allowed.
            </summary>
            <value>
              <c>true</c> if JavaScript is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowStacking">
            <summary>
            Gets or sets a value indicating whether Stack frames should be stored.
            </summary>
            <value>
              <c>true</c> if Stack frames are to be stored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowEmotions">
            <summary>
            Gets or sets a value indicating whether emotions are allowed.
            </summary>
            <value>
              <c>true</c> if emotions are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowConditionsInPattern">
            <summary>
            Gets or sets a value indicating whether <c>If</c> conditions are allowed within <c>Patterns</c>
            </summary>
            <value>
            <c>true</c> if <c>If</c> conditions are allowed within <c>Patterns</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowConditionsInPublicPattern">
            <summary>
            Gets or sets a value indicating whether <c>If</c> conditions are allowed in Public <c>Patterns</c>
            </summary>
            <value>
            <c>true</c> if <c>If</c> conditions are allowed within Public <c>Patterns</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowScriptsInPattern">
            <summary>
            Gets or sets a value indicating whether scripts are allowed within <c>Patterns</c>.
            </summary>
            <value>
            <c>true</c> if scripts are allowed in <c>Patterns</c> ; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowPublicScriptsInPattern">
            <summary>
            Gets or sets a value indicating whether scripts are allowed in public <c>Patterns</c>.
            </summary>
            <value>
            <c>true</c> if scripts are allowed in public <c>Patterns</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowLearning">
            <summary>
            Gets or sets a value indicating whether the Bot is allowed to store Models in its Master <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>.
            </summary>
            <value>
              <c>true</c> if Models can be stored in the Master <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowRemembering">
            <summary>
            Gets or sets a value indicating whether Models can be stored in User's <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>.
            </summary>
            <value>
              <c>true</c> if Models can be stored in the User's <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowScripting">
            <summary>
            Gets or sets a value indicating if scripts are allowed.
            </summary>
            <value>
              <c>true</c> if scripts are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AllowInteractionStorage">
            <summary>
            Gets or sets a value indicating whether Interactions should be stored.
            </summary>
            <value>
              <c>true</c> if Interactions are to be stored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.AutoUserCreation">
            <summary>
            Gets or sets a value indicating whether a new user must be created if the specified ID in User attribute does not exist.
            </summary>
            <value><c>true</c> if user must be created; otherwise, <c>false</c></value>
            <remarks>Default value is <c>true</c></remarks>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.StoreVocabulary">
            <summary>
            Gets or sets a value indicating whether vocabulary should be stored.
            </summary>
            <value>
              <c>true</c> if vocabulary is stored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.StoreExamples">
            <summary>
            Gets or sets a value indicating whether to store Examples.
            </summary>
            <value>
              <c>true</c> if atomic patterns are to be stored; otherwise, <c>false</c>.
            </value>
            <remarks>Default value is <c>true</c>.</remarks>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.StorePatternExamples">
            <summary>
            Gets or sets a value indicating whether to store atomic patterns as examples.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.ParentBot">
            <summary>
            Gets or sets the parent bot.
            </summary>
            <value>
            The parent bot.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.HasParent">
            <summary>
            Gets a value indicating whether the bot has a parent.
            </summary>
            <value>
            <c>true</c> if this bot has a parent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UseParentFilters">
            <summary>
            Gets or sets a value indicating whether parent's Filters are accessible.
            </summary>
            <value>
              <c>true</c> if parent's Filters can be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UseParentSplitters">
            <summary>
            Gets or sets a value indicating whether to use Parent's splitters.
            </summary>
            <value>
              <c>true</c> if parent splitters are to be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UseParentMaps">
            <summary>
            Gets or sets a value indicating whether parent's Maps accessible.
            </summary>
            <value>
              <c>true</c> if parent's Maps are accessible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UseParentRegex">
            <summary>
            Gets or sets a value indicating whether parent's regular expressions are accessible.
            </summary>
            <value>
              <c>true</c> if parent's regular expressions are accessible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UseParentSets">
            <summary>
            Gets or sets a value indicating whether parent's Sets are accessible.
            </summary>
            <value>
              <c>true</c> if parent's Sets are accessible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UseParentRandoms">
            <summary>
            Gets or sets a value indicating whether parent's random collection is accessible.
            </summary>
            <value>
              <c>true</c> if parent's random collection is accessible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UseParentPhrases">
            <summary>
            Gets or sets a value indicating whether parent's phrase collection is accessible.
            </summary>
            <value>
              <c>true</c> if parent's phrase collection is accessible.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.UserHistoryLimit">
            <summary>
            Gets or sets the number of Chat requests and Chat results to be stored in user history.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.ModelLimit">
            <summary>
            Gets or sets the maximum number of Models that can be stored in the Bot's Master <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.SetLimit">
            <summary>
            Gets or sets the maximum number of Set elements that can be stored by the Bot's <see cref="T:Syn.Bot.Siml.Collections.SetCollection"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.MapLimit">
            <summary>
            Gets or sets the maximum number of Map elements that can be stored in the Bot's <see cref="T:Syn.Bot.Siml.Collections.MapCollection"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.FilterLimit">
            <summary>
            Gets or sets the maximum number of Filter elements that can be stored in the Bot's <see cref="T:Syn.Bot.Common.Collections.FilterCollection"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.SplitterLimit">
            <summary>
            Gets or sets the maximum number of Splitter elements that be stored in the Bot's <see cref="T:Syn.Bot.Siml.Collections.TokenizerCollection"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.RegexLimit">
            <summary>
            Gets or sets the maximum number of regular expressions that be stored in the Bot's <see cref="T:Syn.Bot.Siml.Collections.RegexCollection"/>
            </summary>
            <value>
            <see cref="F:System.Int32.MaxValue"/> by default.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.MaxUserIdleInterval">
            <summary>
            Gets or sets the maximum user idle time after which the user history begins to clear up.
            </summary>
            <value>
            The maximum user idle time.
            </value>
            <remarks>The default value is 31 Days.</remarks>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.MaxBotIdleTime">
            <summary>
            Gets or sets the maximum time span after which a Bot is declared idle.
            </summary>
            <remarks>The default value is 31 Days.</remarks>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.BotTimeout">
            <summary>
            Gets or sets the maximum time span beyond which a chat request is timed out.
            </summary>
            <remarks>The default value is 1 Minute</remarks>
        </member>
        <member name="P:Syn.Bot.Siml.BotConfiguration.Encoding">
            <summary>
            Gets or sets the encoding to be used by this Bot for textual transformations.
            </summary>
            <value>
            The encoding.
            </value>
            <remarks>The default value is UTF-8 encoding.</remarks>
        </member>
        <member name="T:Syn.Bot.Siml.BotResponse">
            <summary>
            Represents a response generated after a <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/> has successfully been evaluated.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.BotResponse.Clone">
            <summary>
            Creates a object Clone of this <see cref="T:Syn.Bot.Siml.BotResponse"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.Priority">
            <summary>
            Gets the rank of this <see cref="T:Syn.Bot.Siml.BotResponse"/>
            </summary>
            <value>
            The response rank.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.Element">
            <summary>
            Gets the XML element that represents this response.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.Concept">
            <summary>
            Gets or sets the Concept for this Response.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.ConceptType">
            <summary>
            Gets or sets the ConceptType for this Response.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.ConceptRepeat">
            <summary>
            Gets or sets a value indicating whether the Concept is repeatable.
            </summary>
            <value>
              <c>true</c> if Concept is repeatable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.Label">
            <summary>
            Gets or sets the Label for this Response.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.HasLabel">
            <summary>
            Gets a value indicating if this Response has a Label.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.IsEmpty">
            <summary>
            Gets a value indicating if this Response is Empty.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotResponse.OutputMessage">
            <summary>
            Gets the Output Sentence for this Response.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.BotResponse.Empty">
            <summary>
            Returns an Empty Response. This field is read-only.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.BotResponse.IsEvent">
            <summary>
            Determines whether this response is generated by an event.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Siml.BotUser">
            <summary>
            Represents an entity that interacts with <see cref="T:Syn.Bot.Siml.SimlBot"/>
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.BotUser.#ctor(Syn.Bot.Siml.SimlBot,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.BotUser"/> class.
            </summary>
            <param name="bot">The bot.</param>
            <param name="userId">The user identifier.</param>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.ID">
            <summary>
            Gets the unique ID of this user.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.IsMain">
            <summary>
            Gets a value indicating whether this instance is <see cref="P:Syn.Bot.Siml.SimlBot.MainUser" />.
            </summary>
            <value>
            <c>true</c> if this instance is <see cref="P:Syn.Bot.Siml.SimlBot.MainUser" />; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.LocalVariables">
            <summary>
            Gets the variables that are stored temporarily during a chat session.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.LastInteractionTime">
            <summary>
            Gets the last interaction time.
            </summary>
            <value>
            The last interaction time.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.IsIdle">
            <summary>
            Gets a value indicating whether this user is idle.
            </summary>
            <value>
              <c>true</c> if this user is idle; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.IdleInterval">
            <summary>
            Gets the idle time for the user.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.Bot">
            <summary>
            Gets the bot associated with this user.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.HasHistory">
            <summary>
            Gets a value indicating whether this user has a chat history.
            </summary>
            <value>
            <c>true</c> if this user has a chat history; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.Results">
            <summary>
            Gets the previous results stored.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.Requests">
            <summary>
            Gets a list of <see cref="T:Syn.Bot.Siml.ChatRequest"/>s made by this user.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.Emotion">
            <summary>
            Gets or sets the emotional state for the user.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.LastChatResult">
            <summary>
            Gets the last chat result.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.LastChatRequest">
            <summary>
            Gets the last chat request.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.Settings">
            <summary>
            Gets the settings that contains user related variables.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.BotUser.MiniGraph">
            <summary>
            Gets the mini graph used to store user related Models.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.BotUser.EmotionChanged">
            <summary>
            Occurs when the emotion is this user changes.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.BotUser.ResponseReceived">
            <summary>
            Occurs when an automated or a timed response is generated by the Graph Processor.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.ChatRequest">
            <summary>
            Represents a Chat Request made to <see cref="T:Syn.Bot.Siml.SimlBot"/>.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.IsInternal">
            <summary>
            Gets or sets a value indicating if this request is internal. 
            If <c>true</c> this request is not considered as part of user input and is not added to <see cref="P:Syn.Bot.Siml.BotUser.Requests"/>.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.IsTask">
            <summary>
            Gets or sets a value that indicates if this request was generated by a <see cref="T:Syn.Bot.Siml.LateTask"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.ChatRequest.#ctor(System.String,Syn.Bot.Siml.BotUser)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.ChatRequest"/> class.
            </summary>
            <param name="userMessage">The user message.</param>
            <param name="botUser">The bot user.</param>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.UserMessage">
            <summary>
            Gets the raw user request message
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.Type">
            <summary>
            Gets the type of chat request.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.User">
            <summary>
            Gets the user associated with this chat request.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.Bot">
            <summary>
            Gets the bot to which the chat request is to be made.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.Stats">
            <summary>
            Gets the statistics of this chat request which is finally transferred to <see cref="T:Syn.Bot.Siml.ChatResult"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.TraversedNode">
            <summary>
            Gets the search graph.
            </summary>
            <value>
            The search graph.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.ChatRequest.InputList">
            <summary>
            Gets the List of Splitted Queries based on User Message.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.ChatResult">
            <summary>
            Represents a Bot message that is generated after a <see cref="T:Syn.Bot.Siml.ChatRequest"/> is made.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Stack">
            <summary>
            Gets the stack frames for this <see cref="T:Syn.Bot.Siml.ChatResult"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.User">
            <summary>
            Gets the <see cref="T:Syn.Bot.Siml.BotUser"/> for whom the <see cref="T:Syn.Bot.Siml.ChatResult"/> was generated.
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.ChatResult.ResortToTimedout">
            <summary>
            Cancels all computation and returns the pre-defined Timedout response value.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.ChatResult.ResortToEmpty">
            <summary>
            Cancels all computation and returns the pre-defined Empty response value.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Label">
            <summary>
            Gets the last <c>Label</c> that was set for a <see cref="T:Syn.Bot.Siml.BotResponse"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Responses">
            <summary>
            Gets or sets the responses.
            </summary>
            <value>
            The responses.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Type">
            <summary>
            The type of Result generated.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:Syn.Bot.Siml.ChatResult"/> has a <see cref="T:Syn.Bot.Siml.BotResponse"/>.
            </summary>
            <value>
              <c>true</c> if successful; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Hint">
            <summary>
            Gets or sets the last hint for next user message the Bot expects.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Stats">
            <summary>
            Gets the time taken to process the Result in Milliseconds.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.BotMessage">
            <summary>
            Gets the entire Message the Bot generated for a chat request it received.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.LastResponse">
            <summary>
            Gets the last Response added to this Result.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.ChatResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.BotEmotion">
            <summary>
            Gets the Bot emotion associated with this <see cref="T:Syn.Bot.Siml.ChatResult"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.UserEmotion">
            <summary>
            Gets the User emotion associated with this <see cref="T:Syn.Bot.Siml.ChatResult"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.TraversedNode">
            <summary>
            Gets the search graph.
            </summary>
            <value>
            The search graph.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.ReadTime">
            <summary>
            Gets the 'estimated' time in seconds required for a human to read this result.
            </summary>
            <value>
            The human read time.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Precision">
            <summary>
            Gets the result precision in the range [0,1] based on the number precision-tokens matches.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.ChatResult.GetSuggestions">
            <summary>
            Gets suggestions for the <see cref="T:Syn.Bot.Siml.ChatRequest"/> attached to this <see cref="T:Syn.Bot.Siml.ChatResult"/>.
            </summary>
            <remarks>In case the response is generated by a <see cref="T:Syn.Bot.Siml.Search.SearchResult"/> then the value of <see cref="P:Syn.Bot.Siml.Search.SearchResult.Score"/> is returned.</remarks>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Contract">
            <summary>
            Gets the contract object that can be easily serialized to any Data-Interchange format.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.ChatResult.Data">
            <summary>
            Gets or sets the <see cref="T:Syn.Bot.Siml.Collections.DataCollection"/> stored in this <see cref="T:Syn.Bot.Siml.ChatResult"/>.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Classes.Deprecated.ResultType">
            <summary>
            Provides enumerated values used to determine the type of Result.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Classes.Deprecated.ResultType.Normal">
            <summary>
            Denotes a Response that is generated after a <see cref="T:Syn.Bot.Siml.ChatRequest"/> is successfully evaluated.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Classes.Deprecated.ResultType.Timedout">
            <summary>
            Denotes a response that is generated when the <see cref="T:Syn.Bot.Siml.ChatRequest"/> is timed out.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Classes.Deprecated.ResultType.Empty">
            <summary>
            Denotes an Empty Response
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Classes.TypoGenerator.SwapChars(System.String,System.Int32)">
            <summary>
            SwapChars.
            [Flip 2 chars]
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Classes.TypoGenerator.RepeatChars(System.String,System.Int32)">
            <summary>
            RepeatChars.
            [Repeat 1 char]
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Classes.TypoGenerator.DeleteChar(System.String,System.Int32)">
            <summary>
            DeleteChar.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Classes.TypoGenerator.ChangeCharIfValue(System.String,System.Int32,System.Char,System.Char)">
            <summary>
            ChangeCharIfValue.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.#ctor(Syn.Bot.Siml.SimlBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.ExampleCollection"/> class.
            </summary>
            <param name="bot">The bot.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.ExampleCollection.SuggestionFormatter">
            <summary>
            Gets or set the <see cref="T:Syn.Bot.Siml.Interfaces.ISuggestionFormatter"/> for the <see cref="T:Syn.Bot.Siml.Adapters.SuggestionAdapter"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.Add(Syn.Bot.Siml.Collections.ExampleItem,System.Boolean)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <param name="addVocabulary">Add vocabulary.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.Add(Syn.Bot.Siml.Collections.ExampleItem)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.Contains(Syn.Bot.Siml.Collections.ExampleItem)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.Contains(System.String)">
            <summary>
            Determines whether this <see cref="T:Syn.Bot.Siml.Collections.ExampleCollection"/> contains the specified example value.
            </summary>
            <param name="examplePattern">The example value.</param>
            <returns>
              <c>true</c> if this <see cref="T:Syn.Bot.Siml.Collections.ExampleCollection"/> contains the specified example value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.CopyTo(Syn.Bot.Siml.Collections.ExampleItem[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.ExampleCollection.Remove(Syn.Bot.Siml.Collections.ExampleItem)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.ExampleCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.ExampleCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.Map">
            <summary>
            Default implementation of <see cref="T:Syn.Bot.Siml.Interfaces.IMap"/> interface.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.Map"/> class.
            </summary>
            <param name="mapName">Name of the map.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.Add(Syn.Bot.Siml.Interfaces.IMapItem)">
            <summary>
            Adds the specified map item.
            </summary>
            <param name="mapItem">The map item.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.Add(System.String,System.String)">
            <summary>
            Creates and adds a new <see cref="T:Syn.Bot.Siml.Collections.MapItem"/> using the specified Content and Value.
            </summary>
            <param name="content">The content.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.Contains(Syn.Bot.Siml.Interfaces.IMapItem)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.CopyTo(Syn.Bot.Siml.Interfaces.IMapItem[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.Remove(Syn.Bot.Siml.Interfaces.IMapItem)">
            <summary>
            Removes the specified map item.
            </summary>
            <param name="mapItem">The map item.</param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.Map.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.Map.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.Map.Name">
            <summary>
            Gets the name of the Map
            </summary>
            <value>
            The unique name of the Map.
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Map.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.MapCollection">
            <summary>
            Represents a collection of SIML Maps.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.#ctor(Syn.Bot.Siml.SimlBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.MapCollection"/> class.
            </summary>
            <param name="mainBot">The main bot.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.Add(System.Xml.Linq.XElement)">
            <summary>
            Adds a Map to this collection.
            </summary>
            <param name="mapElement">The map element.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.MapCollection.IsOverridable">
            <summary>
            Determines if an existing MapItem's value can be changed on Load. False by default.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.MapCollection.Item(System.String)">
            <summary>
            Gets a Map with this specified name
            </summary>
            <param name="mapName">Name of the map.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains the specified Map.
            </summary>
            <param name="mapName">Name of the Map.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.Transform(Syn.Bot.Siml.Context,System.String)">
            <summary>
            Transforms the specified parameter.
            </summary>
            <param name="context">The parameter.</param>
            <param name="mapName">Name of the Map.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.Add(Syn.Bot.Siml.Interfaces.IMap)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.Contains(Syn.Bot.Siml.Interfaces.IMap)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.CopyTo(Syn.Bot.Siml.Interfaces.IMap[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.Remove(Syn.Bot.Siml.Interfaces.IMap)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.MapCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.MapCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.MapCollection.GetDocument">
            <summary>
            Gets an SIML document that represents this <see cref="T:Syn.Bot.Siml.Collections.MapCollection"/>.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.Collections.MapCollection.CollectionChanged">
            <summary>
            Occurs when a Map is added, removed, updated or when this collection is cleared.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.MapItem">
            <summary>
            Default implementation of <see cref="T:Syn.Bot.Siml.Interfaces.IMapItem"/> interface.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.RegexCollection">
            <summary>
            Class that contains all Regular Expressions created by the Developer.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.RegexCollection.#ctor(Syn.Bot.Siml.SimlBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.RegexCollection"/> class.
            </summary>
            <param name="bot">The bot.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.RegexCollection.IsAllowed">
            <summary>
            Determines if usage Regular Expressions is enabled.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.SetCollection">
            <summary>
            Represents a collection of SIML <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.#ctor(Syn.Bot.Siml.SimlBot)">
            <summary>
            Initializes a new instance of <see cref="T:Syn.Bot.Siml.Collections.SetCollection"/> class.
            </summary>
            <param name="bot"></param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.GetMatchString(Syn.Bot.Siml.ChatRequest,System.String,System.String,System.Boolean)">
            <summary>
            Gets the match string.
            </summary>
            <param name="request">The request.</param>
            <param name="setName">Name of the set.</param>
            <param name="sentence">The sentence.</param>
            <param name="looseSearch">Behave like search engine.</param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.SetCollection.IsOverridable">
            <summary>
            Gets a value indicating if an already existing <see cref="T:Syn.Bot.Siml.Collections.SetItem"/> can be replaced by a new <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Add(System.Xml.Linq.XElement)">
            <summary>
            Parses and adds the specified <see cref="T:System.Xml.Linq.XElement"/> as <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>.
            </summary>
            <param name="setElement">The set element.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Add(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a new set with the specified name and items.
            </summary>
            <param name="setName">Name of the set.</param>
            <param name="words">The set items.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Add(Syn.Bot.Siml.Interfaces.ISet)">
            <summary>
            Adds the specified <see cref="T:Syn.Bot.Siml.Collections.SetItem"/> to this collection.
            </summary>
            <param name="setItem">The <see cref="T:Syn.Bot.Siml.Collections.SetItem"/> to add.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:Syn.Bot.Siml.Collections.SetItem"/> with the specified name exists.
            </summary>
            <param name="setName">Name of the <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.ContainsWord(System.String)">
            <summary>
            Determines whether the specified set word exists in any of the Sets.
            </summary>
            <param name="word">The set word.</param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.SetCollection.Item(System.String)">
            <summary>
            Gets a <see cref="T:Syn.Bot.Siml.Collections.SetItem"/> with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Clear">
            <summary>
            Clears this collection.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Contains(Syn.Bot.Siml.Interfaces.ISet)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.CopyTo(Syn.Bot.Siml.Interfaces.ISet[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Remove(Syn.Bot.Siml.Interfaces.ISet)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.Remove(System.String)">
            <summary>
            Removes the specified set name.
            </summary>
            <param name="setName">Name of the set.</param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.SetCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.SetCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetCollection.GetDocument">
            <summary>
            Gets an SIML document that represents this <see cref="T:Syn.Bot.Siml.Collections.SetCollection"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.SetItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.SetItem"/> class.
            </summary>
            <param name="name">The name of this <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.SetItem.Name">
            <summary>
            Gets or sets the unique name of this <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>.
            </summary>
            <value>
            The name of this <see cref="T:Syn.Bot.Siml.Collections.SetItem"/>
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.Tokenizer">
            <summary>
            Represents an SIML splitter element.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Tokenizer.#ctor(Syn.Bot.Siml.Collections.TokenizerType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.Tokenizer"/> class.
            </summary>
            <param name="type">Splitter type.</param>
            <param name="value">Splitting value.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.Tokenizer.Type">
            <summary>
            Gets the type of this <see cref="T:Syn.Bot.Siml.Collections.Tokenizer"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.Tokenizer.Value">
            <summary>
            Gets the splitter value.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.Tokenizer.Tokenize(System.Collections.Generic.List{System.String})">
            <summary>
            Splits the specified source string.
            </summary>
            <param name="sourceList">The source string.</param>
            <returns>List of string split using this <see cref="T:Syn.Bot.Siml.Collections.Tokenizer"/>'s value.</returns>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.TokenizerType">
            <summary>
            Provides enumerated values that determine the behavior of a <see cref="T:Syn.Bot.Siml.Collections.Tokenizer"/>
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Collections.TokenizerType.Text">
            <summary>
            Textual splitter.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Collections.TokenizerType.Word">
            <summary>
            Word based splitter.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Collections.TokenizerType.Regex">
            <summary>
            Regular Expression based splitter.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.Collections.UsersCollection.UserAdded">
            <summary>
            Occurs when a user is created.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.Collections.UsersCollection.UserRemoved">
            <summary>
            Occurs when a user is removed
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Collections.VocabularyCollection">
            <summary>
            A Collection of all the known tokens.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.#ctor(Syn.Bot.Siml.SimlBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.VocabularyCollection"/> class.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.Add(System.String)">
            <summary>
            Adds a new <see cref="T:Syn.Bot.Siml.Collections.VocabularyItem"/> with the specified token.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.Add(Syn.Bot.Siml.Collections.VocabularyItem)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.Contains(Syn.Bot.Siml.Collections.VocabularyItem)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.CopyTo(Syn.Bot.Siml.Collections.VocabularyItem[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyCollection.Remove(Syn.Bot.Siml.Collections.VocabularyItem)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.VocabularyCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.VocabularyCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Collections.VocabularyItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Collections.VocabularyItem"/> class.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.VocabularyItem.Token">
            <summary>
            Gets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Collections.VocabularyItem.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
            <value>
            The frequency.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.ConceptType">
            <summary>
            Provides enumerated values used to determine the type of Concept.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.ConceptType.Public">
            <summary>
            Public Concept.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.ConceptType.Private">
            <summary>
            Concept Concept.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Context">
            <summary>
            A Contextual collection of all the items that represent the current SIML node being processed.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.DelayBase.Stopwatch">
            <summary>
            Gets the <see cref="P:Syn.Bot.Siml.DelayBase.Stopwatch"/> used to check if the service can be executed.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Events.MapChangedAction">
            <summary>
            Describes the action that caused a <see cref="E:Syn.Bot.Siml.Collections.MapCollection.CollectionChanged"/> event. 
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapChangedAction.Add">
            <summary>
            One or more items were added to the Map.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapChangedAction.Remove">
            <summary>
            One or more items were removed from the Map.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapChangedAction.Reset">
            <summary>
            The content of the Map changed dramatically.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapChangedAction.Replace">
            <summary>
            One or more items were replaced in the Map.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Events.MapChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syn.Bot.Siml.Collections.MapCollection.CollectionChanged"/> event.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Events.MapChangedEventArgs.MapItem">
            <summary>
            Gets the <see cref="T:Syn.Bot.Siml.Interfaces.IMapItem"/> affected by an Add, Remove, Replace action.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Events.MapChangedEventArgs.Action">
            <summary>
            Gets the action that caused the event. 
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Events.MapCollectionChangedEventArgs.Map">
            <summary>
            Gets the Map associated with this event argument.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Events.MapCollectionChangedEventArgs.EffectOnCollection">
            <summary>
            The effect on <see cref="T:Syn.Bot.Siml.Collections.MapCollection"/>.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Events.MapCollectionEffect">
            <summary>
            Type of effect on a <see cref="T:Syn.Bot.Siml.Collections.MapCollection"/>
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapCollectionEffect.MapAdded">
            <summary>
            A new Map is added.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapCollectionEffect.MapRemoved">
            <summary>
            An existing Map is removed.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapCollectionEffect.CollectionCleared">
            <summary>
            The collection cleared
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Events.MapCollectionEffect.MapUpdated">
            <summary>
            Value of an existing Map is updated.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Events.MemorizingEventArgs.MergeWith(System.Xml.Linq.XDocument)">
            <summary>
            Merges the memorized models with the provided SIML document.
            </summary>
            <param name="userDocument">The user document.</param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.Events.UserAddedEventArgs.User">
            <summary>
            Gets the User.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Events.UserCreatedEventArgs.User">
            <summary>
            Gets the User.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Events.UserRemovedEventArgs.User">
            <summary>
            Gets the User.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Extensions.SettingsExtensions">
            <summary>
            Extends the functionality of the <see cref="T:Syn.Bot.Common.Settings"/> class.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.FilterTarget">
            <summary>
            Provides enumerated values to determine the target of filtration.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.FilterTarget.Input">
            <summary>
            Targets user input
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.FilterTarget.Output">
            <summary>
            Targets user and bot output
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.FilterTarget.Both">
            <summary>
            Targets both user input and bot output
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Functional.FunctionalMapItem">
            <summary>
            Default implementation of <see cref="T:Syn.Bot.Siml.Interfaces.IFunctionalMapItem"/> interface.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Functional.FunctionalMapItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Functional.FunctionalMapItem"/> class.
            </summary>
            <param name="content">The content.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Functional.FunctionalMapItem.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Functional.FunctionalMapItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Graph.GraphNode">
            <summary>
            Represents an SIML Hybrid-Graph System.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.GraphNode.Children">
            <summary>
            GraphNode children.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.GraphNode.Response">
            <summary>
            Gets the response associated with this GraphNode.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.GraphNode.Parent">
            <summary>
            Gets the Parent of this GraphNode. This field is used to safely delete shared GraphNodes for Bots.
            This field is also used for Search Tree visualization.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.GraphNode.Keyword">
            <summary>
            Key associated with this GraphNode.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Graph.GraphNode.AddTree(Syn.Bot.Siml.Graph.ResponseTree,Syn.Bot.Siml.SimlBot)">
            <summary>
            Adds given Response Tree to the GraphNode.
            </summary>
            <param name="responseTree">Response Tree to Add.</param>
            <param name="bot">SynBot. The specified bot and its Cache Manager will be used to store the responses.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.GraphNode.HasChildren">
            <summary>
            Indicates whether this Graph Node has Children Nodes.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Graph.GraphNode.Evaluate(Syn.Bot.Siml.ChatRequest,Syn.Bot.Siml.Graph.QueryTree,Syn.Bot.Siml.Graph.Wildcard)">
            <summary>
            Evaluates the specified request and tries to find the best Response.
            </summary>
            <param name="request">The ChatRequest.</param>
            <param name="pathTree">The current path tree</param>
            <param name="wildCard">The wild card.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Graph.GraphNode.Delete">
            <summary>
            Safely removes this Node from its Parent.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Graph.GraphNode.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this GraphNode's Keyword
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.QueryTree.InputSentence">
            <summary>
            Actual sentence that made up this Token Tree. This property's value is created by splitting sentences using the Splitter.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.QueryTree.OutputResponse">
            <summary>
            Used to store Output Response.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Graph.QueryTree.RemoveLastToken">
            <summary>
            Removes the Last token from this <see cref="T:Syn.Bot.Siml.Graph.QueryTree"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.QueryTree.CurrentInputSentence">
            <summary>
            Input Sentence based on Token List.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.ResponseTree.PreviousValue">
            <summary>
            Used to transfer Previous tag value to Model Response for Stack generation
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Graph.TraversedNode">
            <summary>
            A class that contains all the SIML nodes traversed by the <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/> when searching for a response when a <see cref="T:Syn.Bot.Siml.ChatRequest"/> is received.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.TraversedNode.VisitedNodes">
            <summary>
            Gets all the <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>s visited by the GraphMaster.
            </summary>
            <value>
            The visited nodes.
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.Graph.TraversedNode.GenerateNodes">
            <summary>
            Generates the nodes whose existence can be checked using the ContainsNode method.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Graph.TraversedNode.ContainsNode(Syn.Bot.Siml.Graph.GraphNode)">
            <summary>
            Determines whether the specified node was searched by the Graph Master in the previous session.
            </summary>
            <param name="node">The GraphNode.</param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.Tree.State">
            <summary>
            Gets the current query state.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Graph.Tree.IsParsed">
            <summary>
            Gets a value indicating whether this <see cref="T:Syn.Bot.Siml.Graph.Tree"/> is parsed and contains 0 token.
            </summary>
            <value>
              <c>true</c> if this <see cref="T:Syn.Bot.Siml.Graph.Tree"/> is parsed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Graph.Wildcard">
            <summary>
            Represents an SIML wildcard symbol.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Helper.CacheManager">
            <summary>
            Default implementation of <see cref="T:Syn.Bot.Siml.Interfaces.ICacheManager"/>.
            </summary>
            <seealso cref="T:Syn.Bot.Siml.Interfaces.ICacheManager" />
        </member>
        <member name="M:Syn.Bot.Siml.Helper.CacheManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Helper.CacheManager"/> class.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Helper.CacheManager.Add(System.Object)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Helper.CacheManager.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Helper.CacheManager.GetValue``1(System.Int32)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Helper.CacheManager.Remove(System.Int32)">
            <summary>
            Removes the specified key and the attached object.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.Helper.CacheManager.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Helper.CacheManager.Size">
            <summary>
            Gets the number of objects cached.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Helper.CacheManagerEx">
            <summary>
            Default cache management class for SynBot.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.Helper.HelperUtility">
            <summary>
            A collection of helper methods.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Helper.HelperUtility.CompressString(System.String)">
            <summary>
            Compresses the string.
            </summary>
            <param name="text">The text to compress.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Helper.HelperUtility.DecompressString(System.String)">
            <summary>
            Decompresses the string.
            </summary>
            <param name="compressedText">The compressed text.</param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Siml.Interfaces.IAdapter">
            <summary>
            The default interaface for all Tag Handlers.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Interfaces.IAdapter.Evaluate(Syn.Bot.Siml.Context)">
            <summary>
            Evaluates the given SIML context.
            </summary>
            <param name="simlContext"></param>
            <returns></returns>
        </member>
        <member name="T:Syn.Bot.Siml.Interfaces.IMap">
            <summary>
            An interface that represents an SIML Map
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.IMap.Name">
            <summary>
            Gets the name of the Map
            </summary>
            <value>
            The unique name of the Map.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Interfaces.IMapItem">
            <summary>
            An interface representation of an SIML MapItem element.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.IMapItem.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.IMapItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.IRegexItem.IsStrict">
            <summary>
            Gets or sets a value indicating whether this Regex takes part in normalization.
            </summary>
            <value>
              <c>true</c> if this Regex is strict; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Interfaces.ISet">
            <summary>
            A interface for SIML sets.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.ISet.Name">
            <summary>
            Unique name of the Set.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Interfaces.ISet.GetValues(System.String)">
            <summary>
            All enumerable values held within this Set.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Interfaces.ISet.Contains(System.String,System.String)">
            <summary>
            Gets a value indicating if this Set contains the specified item.
            </summary>
            <param name="value"></param>
            <param name="parameter">Additional parameter.</param>
            <returns></returns>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.ITokenizer.Type">
            <summary>
            Gets the type of this <see cref="T:Syn.Bot.Siml.Collections.Tokenizer"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Interfaces.ITokenizer.Value">
            <summary>
            Gets the splitter value.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Interfaces.ITokenizer.Tokenize(System.Collections.Generic.List{System.String})">
            <summary>
            Splits the specified source string.
            </summary>
            <param name="sourceList">The source string.</param>
            <returns>List of string split using this <see cref="T:Syn.Bot.Siml.Collections.Tokenizer"/>'s value.</returns>
        </member>
        <member name="T:Syn.Bot.Siml.PackageManager">
            <summary>
            Provides functionalities to import an SIML Package into the Bot's <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.PackageManager.#ctor(Syn.Bot.Common.Interfaces.IBot)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.PackageManager"/> class.
            </summary>
            <param name="mainBot">The main bot.</param>
        </member>
        <member name="M:Syn.Bot.Siml.PackageManager.LoadFromString(System.String)">
            <summary>
            Loads SIML Package into the Bot's Master <see cref="T:Syn.Bot.Siml.Graph.GraphNode"/>
            </summary>
            <param name="packageString">The SIML package string.</param>
        </member>
        <member name="M:Syn.Bot.Siml.PackageManager.LoadFromFile(System.String)">
            <summary>
            Loads an SIML Package from the file path specified.
            </summary>
            <param name="filePath">The path to the SIML Package file.</param>
        </member>
        <member name="M:Syn.Bot.Siml.PackageManager.ConvertToPackage(System.Collections.Generic.IEnumerable{System.Xml.Linq.XDocument})">
            <summary>
            Converts a list of SIML documents to an SIML Package.
            </summary>
            <param name="simlDocuments">SIML documents.</param>
            <returns>An SIML Package as <see cref="T:System.String"/></returns>
            <remarks>This SIML Package should be stored in a file with .SimlPk extension</remarks>
        </member>
        <member name="T:Syn.Bot.Siml.Performance.PerformanceWatch">
            <summary>
            Contains functionality to compare internal function performance.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Plugins.MathPlugin.MathParser._supportedOperators">
            <summary>
            Contains supported operators
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Plugins.MathPlugin.MathParser._supportedFunctions">
            <summary>
            Contains supported functions
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initialize new instance of MathParser
            (symbol of decimal separator is read
            from regional settings in system)
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.Parse(System.String,System.Boolean)">
            <summary>
            Produce result of the given math expression
            </summary>
            <param name="expression">Math expression (infix/standard notation)</param>
            <param name="isRadians"></param>
            <returns>Result</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.FormatString(System.String)">
            <summary>
            Produce formatted string by the given string
            </summary>
            <param name="expression">Unformatted math expression</param>
            <returns>Formatted math expression</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.ConvertToRPN(System.String)">
            <summary>
            Produce math expression in reverse polish notation
            by the given string
            </summary>
            <param name="expression">Math expression in infix notation</param>
            <returns>Math expression in postfix notation (RPN)</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.LexicalAnalysisInfixNotation(System.String,System.Int32@)">
            <summary>
            Produce token by the given math expression
            </summary>
            <param name="expression">Math expression in infix notation</param>
            <param name="pos">Current position in string for lexical analysis</param>
            <returns>Token</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.SyntaxAnalysisInfixNotation(System.String,System.Text.StringBuilder,System.Collections.Generic.Stack{System.String})">
            <summary>
            Syntax analysis of infix notation
            </summary>
            <param name="token">Token</param>
            <param name="outputString">Output string (math expression in RPN)</param>
            <param name="stack">Stack which contains operators (or functions)</param>
            <returns>Output string (math expression in RPN)</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.Priority(System.String,System.String)">
            <summary>
            Is priority of token less (or equal) to priority of p
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.IsRightAssociated(System.String)">
            <summary>
            Is right associated operator
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.GetPriority(System.String)">
            <summary>
            Get priority of operator
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.Calculate(System.String)">
            <summary>
            Calculate expression in reverse-polish notation
            </summary>
            <param name="expression">Math expression in reverse-polish notation</param>
            <returns>Result</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.LexicalAnalysisRpn(System.String,System.Int32@)">
            <summary>
            Produce token by the given math expression
            </summary>
            <param name="expression">Math expression in reverse-polish notation</param>
            <param name="pos">Current position of lexical analysis</param>
            <returns>Token</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.SyntaxAnalysisRpn(System.Collections.Generic.Stack{System.Double},System.String)">
            <summary>
            Syntax analysis of reverse-polish notation
            </summary>
            <param name="stack">Stack which contains operands</param>
            <param name="token">Token</param>
            <returns>Stack which contains operands</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.ApplyTrigFunction(System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Apply trigonometric function
            </summary>
            <param name="func">Trigonometric function</param>
            <param name="arg">Argument</param>
            <returns>Result of function</returns>
        </member>
        <member name="M:Syn.Bot.Siml.Plugins.MathPlugin.MathParser.NumberOfArguments(System.String)">
            <summary>
            Produce number of arguments for the given operator
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.RepeatManager">
            <summary>
            Represents a repeat management system.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.RepeatManager.AddRepeat(System.Xml.Linq.XElement)">
            <summary>
            Adds the repeat element to this manager.
            </summary>
            <param name="repeatElement">The repeat element.</param>
        </member>
        <member name="P:Syn.Bot.Siml.RepeatManager.IsManaged">
            <summary>
            Gets a value indicating whether a repetition mechanism exists.
            </summary>
            <value>
            <c>true</c> if a repetition mechanism exists; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.RepeatManager.CheckRepetition(Syn.Bot.Siml.ChatResult,Syn.Bot.Siml.ChatRequest)">
            <summary>
            Checks the repetition of non-repeatable Models.
            </summary>
            <param name="chatResult">The chat result.</param>
            <param name="chatRequest">The chat request.</param>
        </member>
        <member name="T:Syn.Bot.Siml.Search.ISearchEngine">
            <summary>
            Interface for Search Engine mechanism.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Search.ISearchEngine.GetSearchResult(Syn.Bot.Siml.Search.SearchQuery,Syn.Bot.Siml.Search.SearchItem)">
            <summary>
            Gets the search result.
            </summary>
            <param name="searchQuery">The search query.</param>
            <param name="searchItem">The search item.</param>
        </member>
        <member name="T:Syn.Bot.Siml.Search.SearchEngine">
            <summary>
            Default implementation of <see cref="T:Syn.Bot.Siml.Search.ISearchEngine"/> interface.
            </summary>
            <seealso cref="T:Syn.Bot.Siml.Search.ISearchEngine" />
        </member>
        <member name="M:Syn.Bot.Siml.Search.SearchEngine.GetSearchResult(Syn.Bot.Siml.Search.SearchQuery,Syn.Bot.Siml.Search.SearchItem)">
            <summary>
            Gets the search result.
            </summary>
            <param name="searchQuery">The search query.</param>
            <param name="searchItem">The search item.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.Search.SearchItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Search.SearchItem"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
            
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchItem.Pattern">
            <summary>
            Gets the actual search pattern.
            </summary>
            <value>
            The pattern.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchItem.Tokens">
            <summary>
            Gets the <see cref="T:Syn.Bot.Siml.Search.SearchToken"/> list. 
            </summary>
            <value>
            The tokens.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchItem.IsAtomic">
            <summary>
            Gets a value indicating whether the <see cref="P:Syn.Bot.Siml.Search.SearchItem.Pattern"/> is atomic.
            </summary>
            <value>
              <c>true</c> if this <see cref="P:Syn.Bot.Siml.Search.SearchItem.Pattern"/> is atomic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Syn.Bot.Siml.Search.SearchMode.Hard">
            <summary>
            The hard search scheme.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.Search.SearchMode.Soft">
            <summary>
            The soft search scheme. This is the default search mode.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchQuery.Request">
            <summary>
            Gets the <see cref="T:Syn.Bot.Siml.ChatRequest"/> for this search query.
            </summary>
            <value>
            The request.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchQuery.Query">
            <summary>
            Gets the query string.
            </summary>
            <value>
            The query.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchQuery.WordCount">
            <summary>
            Gets the number of words in <see cref="P:Syn.Bot.Siml.Search.SearchQuery.Query"/>.
            </summary>
            <value>
            The word count.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchQuery.BaseScore">
            <summary>
            Gets or sets the minimum score required for a <see cref="T:Syn.Bot.Siml.Search.SearchResult"/> to be accepted.
            </summary>
            <value>
            The minimum score.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchQuery.DisorderPenalty">
            <summary>
            Gets or sets the disorder penalty that is applied when word order is not matched.
            </summary>
            <value>
            The disorder penalty.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchQuery.MaxCount">
            <summary>
            Gets or sets the maximum number of items allowed in a <see cref="T:Syn.Bot.Siml.Search.SearchResult"/>.
            </summary>
            <value>
            The gate.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchQuery.CommonWords">
            <summary>
            Gets the common words used to process tolerance of missing words.
            </summary>
            <value>
            The common words.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.Search.SearchResult">
            <summary>
            Represents the returned value of a search result.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Search.SearchResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Search.SearchResult"/> class.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.Search.SearchResult.#ctor(Syn.Bot.Siml.Search.SearchResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Syn.Bot.Siml.Search.SearchResult"/> class.
            </summary>
            <param name="searchResult">The search result.</param>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchResult.Score">
            <summary>
            Gets the search result score.
            </summary>
            <value>
            The score.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchResult.Query">
            <summary>
            Gets the query against which this search result was generated.
            </summary>
            <value>
            The query.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchResult.Value">
            <summary>
            Gets the generated value for the tokens that were processed for this search result.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchResult.InputMatchList">
            <summary>
            Gets the input match list.
            </summary>
            <value>
            The input match list.
            </value>
        </member>
        <member name="F:Syn.Bot.Siml.Search.SearchResult.Empty">
            <summary>
            Represents an empty <see cref="T:Syn.Bot.Siml.Search.SearchResult"/>. This field is read-only.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchToken.Format">
            <summary>
            Gets the normalized value after removing strip symbols.
            </summary>
            <value>
            The normalized value.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchToken.Value">
            <summary>
            Gets the value without symbols being stripped.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.Search.SearchToken.Type">
            <summary>
            Gets the type of search token.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.SimlBot">
            <summary>
            Represents an SIML Classic Interpreter
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Activate(System.String,System.String,System.String)">
            <summary>
            Activates the specified license type.
            </summary>
            <param name="licenseType">Type of the license.</param>
            <param name="licensee">The licensee.</param>
            <param name="licenseKey">The license key.</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Activate(System.String)">
            <summary>
            Activates the framework with the license key.
            </summary>
            <param name="licenseKey">The license key.</param>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.LicenseType">
            <summary>
            Gets a string representation of the license type.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Version">
            <summary>
            Gets the version of the Bot Library.
            </summary>
            <value>
            The Bot Library version.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.MaxBotIdleTime">
            <summary>
            Gets the maximum idle time span after which the Bot is declared Idle.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Instance">
            <summary>
            Gets or sets the shared Main <see cref="T:Syn.Bot.Siml.SimlBot"/>. A new <see cref="T:Syn.Bot.Siml.SimlBot"/> object is initialized on 'Get' call.
            </summary>
            <value>
            The main bot.
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.#ctor">
            <summary>
            Initializes a new instance of SynBot class.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.#ctor(Syn.Bot.Siml.BotConfiguration)">
            <summary>
            Initializes a new instance of <see cref="T:Syn.Bot.Siml.SimlBot"/> class with the specified configuration.
            </summary>
            <param name="configuration">Bot Configuration.</param>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Vocabulary">
            <summary>
            Gets all the unique tokens known to the Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Configuration">
            <summary>
            Gets the Bot configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Parent">
            <summary>
            Get the Parent Bot
            </summary>
            <returns>The Parent Bot if it exists else returns null.</returns>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.HasParent">
            <summary>
            Determines if this Bot has a parent Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.EmotionMLDocument">
            <summary>
            Gets the default EmotionML parser.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Emotion">
            <summary>
            Gets the current emotion for the Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Examples">
            <summary>
            Gets a list of atomic patterns known by the bot.
            </summary>
            <value>
            Atomic Patterns.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Logger">
            <summary>
            Gets the default logger.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.MainUser">
            <summary>
            Gets the "supposedly" main user for this Bot.
            </summary>
            <value>
            Main user
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Adapters">
            <summary>
            Gets the SIML Classic Adapters collection.
            </summary>
            <value>
            The adapters collection.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.DefaultUserSettings">
            <summary>
            Gets the default user settings.
            </summary>
            <value>
            The default user settings.
            </value>
            <remarks>
            This <see cref="P:Syn.Bot.Siml.SimlBot.Settings"/> contains the default variables that are loaded upon package load. 
            Once loaded any changes to this settings will not affect other <see cref="T:Syn.Bot.Siml.BotUser"/> settings.
            </remarks>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Settings">
            <summary>
            Gets the Settings object that contains Bot variables.
            </summary>
            <value>
            List of variables known by the Bot.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Maps">
            <summary>
            Gets the map collection.
            </summary>
            <value>
            The map collection.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Filters">
            <summary>
            Gets the filter collection.
            </summary>
            <value>
            The filter collection.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.ScriptEngines">
            <summary>
            Gets the Script Manager.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Timer">
            <summary>
            Gets the default Timer for <see cref="T:Syn.Bot.Siml.LateTask"/> execution.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Tokenizers">
            <summary>
            Gets the Splitter Collection.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.GraphMaster">
            <summary>
            Gets the master Graph Node.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.SearchEngine">
            <summary>
            Gets or sets the search engine for processing examples.
            </summary>
            <value>
            The search engine.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.RegularExpressions">
            <summary>
            Gets the regex collection.
            </summary>
            <value>
            The regex collection.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Sets">
            <summary>
            Gets the set collection.
            </summary>
            <value>
            The set collection.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Interactions">
            <summary>
            Gets the interactions made by all bot users.
            </summary>
            <value>
            The interactions.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.RepeatManager">
            <summary>
            Gets the repeat manager.
            </summary>
            <value>
            The repeat manager.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.DateTime">
            <summary>
            Gets or sets the Date Time value.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Culture">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo"/> under which the Bot is currently operating.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Stats">
            <summary>
            Gets Bot stats.
            </summary>
            <value>
            BotStats
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Timeout">
            <summary>
            Gets the time span after which a chat request is timed out
            </summary>
            <value>
            Timeout
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Users">
            <summary>
            Gets all known <see cref="T:Syn.Bot.Siml.BotUser"/>s.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.CacheManager">
            <summary>
            Gets the cache manager.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Encoding">
            <summary>
            Gets the encoding used by the Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.IsIdle">
            <summary>
            Gets a value indicating if this bot has exceeded its maximum allowed idle time.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.ID">
            <summary>
            Gets the Unique ID assigned to this Bot.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.Interpreter">
            <summary>
            Gets the SIML Classic Interpreter.
            </summary>
            <value>
            The SIML Classic Interpreter.
            </value>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.CreateUser">
            <summary>
            Creates a new <see cref="T:Syn.Bot.Siml.BotUser"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.CreateUser(System.String)">
            <summary>
            Creates User with the specified ID.
            </summary>
            <param name="userId">Unique Identifier.</param>
            <remarks>If a user with the specified id already exists then the existing user is returned.</remarks>>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBot.PackageManager">
            <summary>
            Loads SIML Package from String.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Import(System.Xml.Linq.XDocument,Syn.Bot.Siml.BotUser)">
            <summary>
            Adds the SIML document to the user's mini graph.
            </summary>
            <param name="simlDocument">The SIML document.</param>
            <param name="user">The Bot user.</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Import(System.Collections.Generic.IEnumerable{System.Xml.Linq.XDocument})">
            <summary>
            Adds SIML documents to Bot Knowledge-Base after proper SIML document sequencing.
            </summary>
            <param name="simlDocuments">SIML Elements</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.ImportFromString(System.String)">
            <summary>
            Loads SIML from string preserving all whitespace.
            </summary>
            <param name="simlString">SIML String.</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Import(System.Xml.Linq.XDocument)">
            <summary>
            Adds the SIML document to bot.
            </summary>
            <param name="simlDocument">The SIML document.</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.ImportFromDirectory(System.String)">
            <summary>
            Searches the specified directory and its sub-directories for SIML files and sequentially loads them.
            </summary>
            <param name="directoryPath">Path to directory containing SIML files.</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Import(System.Xml.Linq.XDocument,Syn.Bot.Siml.Graph.GraphNode)">
            <summary>
            Scans and adds the elements within the root SIML element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Raise(System.String)">
            <summary>
            Raises the specified event for the <see cref="P:Syn.Bot.Siml.SimlBot.MainUser"/>.
            </summary>
            <param name="eventName">The event name.</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Raise(System.String,Syn.Bot.Siml.BotUser)">
            <summary>
            Raises the specified event for the specified <see cref="T:Syn.Bot.Siml.BotUser"/>.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Chat(System.String)">
            <summary>
            Chat
            </summary>
            <param name="userMessage">user Message</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Chat(System.String,Syn.Bot.Siml.BotUser)">
            <summary>
            Sends the message as user chat request.
            </summary>
            <param name="userMessage">The user message.</param>
            <param name="botUser">The <see cref="T:Syn.Bot.Siml.BotUser"/> that is making this chat request.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Chat(Syn.Bot.Siml.ChatRequest)">
            <summary>
            Sends the specified chat request.
            </summary>
            <param name="chatRequest">The chat request.</param>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Chat``1(System.String)">
            <summary>
            EXPERIMENTAL: Starts a chat request and returnes the last evaluated contextual Data of the specified type.
            </summary>
            <param name="userMessage"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBot.Release">
            <summary>
            Releases and clears all resources used by this Bot. This function is to be used if the Bot has a Parent.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.SimlBot.Learning">
            <summary>
            Occurs when the Bot learns a new Model.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.SimlBot.Memorizing">
            <summary>
            Occurs when the Bot memorizes a new Model for a specific user.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.SimlBot.EmotionChanged">
            <summary>
            Occurs when the emotion of the Bot changes.
            </summary>
        </member>
        <member name="E:Syn.Bot.Siml.SimlBot.Suggesting">
            <summary>
            Occurs when the Bot is suggesting example inputs from <see cref="P:Syn.Bot.Siml.SimlBot.Examples"/>.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.SimlBotStats">
            <summary>
            A container class used to store Bot statistics.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBotStats.IdleTime">
            <summary>
            Gets a value indicating how long the Bot was Idle.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBotStats.ModelCount">
            <summary>
            Total number of Models known.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBotStats.ConceptCount">
            <summary>
            Total number of Concepts known.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBotStats.PublicConceptCount">
            <summary>
            Total number of Public Concepts known.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBotStats.PrivateConceptCount">
            <summary>
            Total number of Concept Concepts known.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBotStats.Interactions">
            <summary>
            Gets the total number of Chat requests this Bot has processed.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBotStats.LoadTime">
            <summary>
            Gets the time in Milliseconds taken to load the Bot Package.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBotStats.FiltrationTime">
            <summary>
            Gets the average filtration time in milliseconds.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBotStats.MappingTime">
            <summary>
            Gets the average mapping time in milliseconds.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlBotStats.SplittingTime">
            <summary>
            Gets the average time taken in milliseconds to split user message into multiple sentences.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.SimlBotStats.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Syn.Bot.Siml.SimlClassicInterpreter">
            <summary>
            A Processor class that processes all the adapters found in the <see cref="T:Syn.Bot.Siml.Context"/>.
            </summary>
        </member>
        <member name="M:Syn.Bot.Siml.SimlClassicInterpreter.SaveToGraph(System.Xml.Linq.XElement,Syn.Bot.Siml.Context,Syn.Bot.Siml.Graph.GraphNode)">
            <summary>
            Saves content to GraphNode
            </summary>
            <param name="elementNode">The element node containing the content to save. Usually the Model element.</param>
            <param name="parameter">Parameter.</param>
            <param name="graphNode">GraphNode.</param>
        </member>
        <member name="T:Syn.Bot.Siml.SimlSpecification">
            <summary>
            Represents an SIML specification.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlSpecification.Namespace">
            <summary>
            Gets a class with Properties that point to known and/or commonly used Namespaces in an SIML document.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.SimlSpecification.Version">
            <summary>
            Gets the SIML version.
            </summary>
            <value>
            1.0
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.SimlSpecification.EmptyDocument">
            <summary>
            Gets an empty SIML document.
            </summary>
            <value>
            An empty SIML document.
            </value>
        </member>
        <member name="T:Syn.Bot.Siml.StackFrame">
            <summary>
            Container class for Stack information.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.StackFrame.Concept">
            <summary>
            Gets the SIML Concept name.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.StackFrame.Trigger">
            <summary>
            Gets the SIML Pattern that triggered this <see cref="T:Syn.Bot.Siml.BotResponse"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.StackFrame.Siml">
            <summary>
            Gets the SIML code.
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.StackFrame.Previous">
            <summary>
            Gets the value of the <c>Previous</c> element.
            </summary>
            <value>
            Previous element's value.
            </value>
        </member>
        <member name="P:Syn.Bot.Siml.StackFrame.Label">
            <summary>
            Gets the value of the <c>Label</c> associated with this <see cref="T:Syn.Bot.Siml.BotResponse"/>
            </summary>
        </member>
        <member name="P:Syn.Bot.Siml.StackFrame.Output">
            <summary>
            Gets the Bot output.
            </summary>
        </member>
        <member name="T:Syn.Bot.Siml.SuggestionFormatter">
            <summary>
            Default implementation of <see cref="T:Syn.Bot.Siml.Interfaces.ISuggestionFormatter"/> interface.
            </summary>
        </member>
        <member name="F:Syn.Bot.Siml.VariableNames.UserMessage">
            Variable where the current user message from chat request is saved.
        </member>
    </members>
</doc>
